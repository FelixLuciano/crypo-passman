{
  "version": 3,
  "sources": ["../../../../node_modules/@formkit/utils/dist/index.mjs", "../../../../node_modules/@formkit/core/dist/index.mjs", "../../../../node_modules/@formkit/observer/dist/index.mjs", "../../../../node_modules/@formkit/validation/dist/index.mjs", "../../../../node_modules/@formkit/i18n/dist/index.mjs"],
  "sourcesContent": ["/**\n * Commonly shared utility functions between official FormKit packages.\n *\n * You can add this package by using `npm install @formkit/utils` or `yarn add @formkit/utils`.\n *\n * @packageDocumentation\n */\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Explicit keys that should always be cloned.\n */\nconst explicitKeys = [\n    '__key',\n    '__init',\n    '__shim',\n    '__original',\n    '__index',\n    '__prevKey',\n];\n/**\n * Generates a random string.\n *\n * @example\n *\n * ```javascript\n * import { token } from '@formkit/utils'\n *\n * const tk = token()\n * // 'jkbyqnphqm'\n * ```\n *\n * @returns string\n *\n * @public\n */\nfunction token() {\n    return Math.random().toString(36).substring(2, 15);\n}\n/**\n * Creates a new set of the specified type and uses the values from an Array or\n * an existing Set.\n *\n * @example\n *\n * ```javascript\n * import { setify } from '@formkit/utils'\n *\n * const tk = setify(['a', 'b'])\n * // Set(2) {'a', 'b'}\n * ```\n *\n * @param items - An array or a Set.\n *\n * @returns `Set<T>`\n *\n * @public\n */\nfunction setify(items) {\n    return items instanceof Set ? items : new Set(items);\n}\n/**\n * Given 2 arrays, return them as a combined array with no duplicates.\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n *\n * @returns `any[]`\n *\n * @public\n */\nfunction dedupe(arr1, arr2) {\n    const original = arr1 instanceof Set ? arr1 : new Set(arr1);\n    if (arr2)\n        arr2.forEach((item) => original.add(item));\n    return [...original];\n}\n/**\n * Checks if the given property exists on the given object.\n *\n * @param obj - An object to check.\n * @param property - The property to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction has(obj, property) {\n    return Object.prototype.hasOwnProperty.call(obj, property);\n}\n/**\n * Compare two values for equality, optionally at depth.\n *\n * @param valA - First value.\n * @param valB - Second value.\n * @param deep - If it will compare deeply if it's an object.\n * @param explicit - An array of keys to explicity check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction eq(valA, // eslint-disable-line\nvalB, // eslint-disable-line\ndeep = true, explicit = ['__key']) {\n    if (valA === valB)\n        return true;\n    if (typeof valB === 'object' && typeof valA === 'object') {\n        if (valA instanceof Map)\n            return false;\n        if (valA instanceof Set)\n            return false;\n        if (valA instanceof Date)\n            return false;\n        if (valA === null || valB === null)\n            return false;\n        if (Object.keys(valA).length !== Object.keys(valB).length)\n            return false;\n        for (const k of explicit) {\n            if ((k in valA || k in valB) && valA[k] !== valB[k])\n                return false;\n        }\n        for (const key in valA) {\n            if (!(key in valB))\n                return false;\n            if (valA[key] !== valB[key] && !deep)\n                return false;\n            if (deep && !eq(valA[key], valB[key], deep, explicit))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if a value is empty or not.\n *\n * @param value - The value to check if it's empty.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction empty(value // eslint-disable-line\n) {\n    const type = typeof value;\n    if (type === 'number')\n        return false;\n    if (value === undefined)\n        return true;\n    if (type === 'string') {\n        return value === '';\n    }\n    if (type === 'object') {\n        if (value === null)\n            return true;\n        for (const _i in value)\n            return false;\n        if (value instanceof RegExp)\n            return false;\n        if (value instanceof Date)\n            return false;\n        return true;\n    }\n    return false;\n}\n/**\n * Escape a string for use in regular expressions.\n *\n * @param string - String to be escaped.\n *\n * @returns `string`\n *\n * @public\n */\nfunction escapeExp(string) {\n    // $& means the whole matched string\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/**\n * Given a string date format, return a regex to match against.\n *\n * @param format - String to be transformed to RegExp.\n *\n * @example\n *\n * ```javascript\n * regexForFormat('MM') // returns '(0[1-9]|1[012])'\n * ```\n *\n * @returns `RegExp`\n *\n * @public\n */\nfunction regexForFormat(format) {\n    const escaped = `^${escapeExp(format)}$`;\n    const formats = {\n        MM: '(0[1-9]|1[012])',\n        M: '([1-9]|1[012])',\n        DD: '([012][0-9]|3[01])',\n        D: '([012]?[0-9]|3[01])',\n        YYYY: '\\\\d{4}',\n        YY: '\\\\d{2}',\n    };\n    const tokens = Object.keys(formats);\n    return new RegExp(tokens.reduce((regex, format) => {\n        return regex.replace(format, formats[format]);\n    }, escaped));\n}\n/**\n * Given a FormKit input type, returns the correct lowerCased() type.\n *\n * @param type - String to return to check for correct type\n *\n * @returns `'list' | 'group' | 'input'`\n *\n * @public\n */\nfunction nodeType(type) {\n    const t = type.toLowerCase();\n    if (t === 'list')\n        return 'list';\n    if (t === 'group')\n        return 'group';\n    return 'input';\n}\n/**\n * Determines if an object is an object.\n *\n * @param o - The value to be checked.\n *\n * @returns `boolean`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isRecord(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n}\n/**\n * Checks if an object is a simple array or record.\n *\n * @param o - Value to be checked.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isObject(o) {\n    return isRecord(o) || Array.isArray(o);\n}\n/**\n * Attempts to determine if an object is a POJO (Plain Old JavaScript Object).\n * Mostly lifted from is-plain-object: https://github.com/jonschlinkert/is-plain-object\n * Copyright (c) 2014-2017, Jon Schlinkert.\n *\n * @param o - The value to be checked.\n *\n * @returns `boolean`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction isPojo(o) {\n    if (isRecord(o) === false)\n        return false;\n    if (o.__FKNode__ || o.__POJO__ === false)\n        return false;\n    const ctor = o.constructor;\n    if (ctor === undefined)\n        return true;\n    const prot = ctor.prototype;\n    if (isRecord(prot) === false)\n        return false;\n    if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Recursively merge data from additional into original returning a new object.\n *\n * @param original - The original array.\n * @param additional - The array to merge.\n * @param extendArrays - If it will extend/concatenate array values instead of\n * replacing them.\n * @param ignoreUndefined - If it will preserve values from the original object\n * even if the additional object has those values set to undefined.\n *\n * @returns `Record<string, any> | string | null`\n *\n * @public\n */\nfunction extend(original, additional, extendArrays = false, ignoreUndefined = false) {\n    if (additional === null)\n        return null;\n    const merged = {};\n    if (typeof additional === 'string')\n        return additional;\n    for (const key in original) {\n        if (has(additional, key) &&\n            (additional[key] !== undefined || !ignoreUndefined)) {\n            if (extendArrays &&\n                Array.isArray(original[key]) &&\n                Array.isArray(additional[key])) {\n                merged[key] = original[key].concat(additional[key]);\n                continue;\n            }\n            if (additional[key] === undefined) {\n                continue;\n            }\n            if (isPojo(original[key]) && isPojo(additional[key])) {\n                merged[key] = extend(original[key], additional[key], extendArrays, ignoreUndefined);\n            }\n            else {\n                merged[key] = additional[key];\n            }\n        }\n        else {\n            merged[key] = original[key];\n        }\n    }\n    for (const key in additional) {\n        if (!has(merged, key) && additional[key] !== undefined) {\n            merged[key] = additional[key];\n        }\n    }\n    return merged;\n}\n/**\n * Determine if the given string is fully quoted.\n *\n * @example\n *\n * ```javascript\n * hello - false\n * \"hello\" - true\n * 'world' - true\n * \"hello\"==\"world\" - false\n * \"hello'this'\" - false\n * \"hello\"'there' - false\n * \"hello\"\"there\" - false\n * 'hello === world' - true\n * ```\n *\n * @param str - The string to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isQuotedString(str) {\n    // quickly return false if the value is note quoted\n    if (str[0] !== '\"' && str[0] !== \"'\")\n        return false;\n    if (str[0] !== str[str.length - 1])\n        return false;\n    const quoteType = str[0];\n    for (let p = 1; p < str.length; p++) {\n        if (str[p] === quoteType &&\n            (p === 1 || str[p - 1] !== '\\\\') &&\n            p !== str.length - 1) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Remove extra escape characters.\n *\n * @param str - String to remove extra escape characters from.\n *\n * @returns `string`\n *\n * @public\n */\nfunction rmEscapes(str) {\n    if (!str.length)\n        return '';\n    let clean = '';\n    let lastChar = '';\n    for (let p = 0; p < str.length; p++) {\n        const char = str.charAt(p);\n        if (char !== '\\\\' || lastChar === '\\\\') {\n            clean += char;\n        }\n        lastChar = char;\n    }\n    return clean;\n}\n/**\n * Performs a recursive `Object.assign`-like operation.\n *\n * @param a - An object to be assigned.\n * @param b - An object to get values from.\n *\n * @returns `A & B`\n *\n * @public\n */\nfunction assignDeep(a, b) {\n    for (const key in a) {\n        if (has(b, key) &&\n            a[key] !== b[key] &&\n            !(isPojo(a[key]) && isPojo(b[key]))) {\n            a[key] = b[key];\n        }\n        else if (isPojo(a[key]) && isPojo(b[key])) {\n            assignDeep(a[key], b[key]);\n        }\n    }\n    for (const key in b) {\n        if (!has(a, key)) {\n            a[key] = b[key];\n        }\n    }\n    return a;\n}\n/**\n * Filters out values from an object that should not be considered \"props\" of\n * a core node, like \"value\" and \"name\".\n *\n * @param sets - The arrays to get values filtered out of.\n *\n * @returns `Record<string, any>`\n *\n * @public\n */\nfunction nodeProps(...sets) {\n    return sets.reduce((valid, props) => {\n        const { value, name, modelValue, config, plugins, ...validProps } = props; // eslint-disable-line\n        return Object.assign(valid, validProps);\n    }, {});\n}\n/**\n * Parse a string for comma-separated arguments.\n *\n * @param str - String to parse arguments from.\n *\n * @returns `string[]`\n *\n * @public\n */\nfunction parseArgs(str) {\n    const args = [];\n    let arg = '';\n    let depth = 0;\n    let quote = '';\n    let lastChar = '';\n    for (let p = 0; p < str.length; p++) {\n        const char = str.charAt(p);\n        if (char === quote && lastChar !== '\\\\') {\n            quote = '';\n        }\n        else if ((char === \"'\" || char === '\"') && !quote && lastChar !== '\\\\') {\n            quote = char;\n        }\n        else if (char === '(' && !quote) {\n            depth++;\n        }\n        else if (char === ')' && !quote) {\n            depth--;\n        }\n        if (char === ',' && !quote && depth === 0) {\n            args.push(arg);\n            arg = '';\n        }\n        else if (char !== ' ' || quote) {\n            arg += char;\n        }\n        lastChar = char;\n    }\n    if (arg) {\n        args.push(arg);\n    }\n    return args;\n}\n/**\n * Return a new (shallow) object with any desired props removed.\n *\n * @param obj - The starting object.\n * @param toRemove - The array of properties to remove. Accepts strings or\n * regular expressions.\n *\n * @returns `Record<string, any>`\n *\n * @public\n */\nfunction except(obj, toRemove) {\n    const clean = {};\n    const exps = toRemove.filter((n) => n instanceof RegExp);\n    const keysToRemove = new Set(toRemove);\n    for (const key in obj) {\n        if (!keysToRemove.has(key) && !exps.some((exp) => exp.test(key))) {\n            clean[key] = obj[key];\n        }\n    }\n    return clean;\n}\n/**\n * Extracts a set of keys from a given object. Importantly, this will extract\n * values even if they are not set on the original object — they will just have\n * an undefined value.\n *\n * @param obj - The object to get values from.\n * @param include - The array of items to get.\n *\n * @returns `Record<string, any>`\n *\n * @public\n */\nfunction only(obj, include) {\n    const clean = {};\n    const exps = include.filter((n) => n instanceof RegExp);\n    include.forEach((key) => {\n        if (!(key instanceof RegExp)) {\n            clean[key] = obj[key];\n        }\n    });\n    Object.keys(obj).forEach((key) => {\n        if (exps.some((exp) => exp.test(key))) {\n            clean[key] = obj[key];\n        }\n    });\n    return clean;\n}\n/**\n * This converts kebab-case to camelCase. It ONLY converts from kebab to camel.\n *\n * @param str - String to be camel cased.\n *\n * @returns `string`\n *\n * @public\n */\nfunction camel(str) {\n    return str.replace(/-([a-z0-9])/gi, (_s, g) => g.toUpperCase());\n}\n/**\n * This converts camel-case to kebab case. It ONLY converts from camel to kebab.\n *\n * @param str - String to be kebabed.\n *\n * @returns `string`\n *\n * @public\n */\nfunction kebab(str) {\n    return str\n        .replace(/([a-z0-9])([A-Z])/g, (_s, trail, cap) => trail + '-' + cap.toLowerCase())\n        .replace(' ', '-')\n        .toLowerCase();\n}\n/**\n * Shallowly clones the given object.\n *\n * @param obj - Object to be shallowly cloned.\n * @param explicit - The array of keys to be explicity cloned.\n *\n * @returns `T`\n *\n * @public\n */\nfunction shallowClone(obj, explicit = explicitKeys) {\n    if (obj !== null && typeof obj === 'object') {\n        let returnObject;\n        if (Array.isArray(obj))\n            returnObject = [...obj];\n        else if (isPojo(obj))\n            returnObject = { ...obj };\n        if (returnObject) {\n            applyExplicit(obj, returnObject, explicit);\n            return returnObject;\n        }\n    }\n    return obj;\n}\n/**\n * Perform a recursive clone on a given object. Only intended to be used\n * for simple objects like arrays and POJOs.\n *\n * @param obj - Object to be cloned.\n * @param explicit - Array of items to be explicity cloned.\n *\n * @returns `T`\n *\n * @public\n */\nfunction clone(obj, explicit = explicitKeys) {\n    if (obj === null ||\n        obj instanceof RegExp ||\n        obj instanceof Date ||\n        obj instanceof Map ||\n        obj instanceof Set ||\n        (typeof File === 'function' && obj instanceof File))\n        return obj;\n    let returnObject;\n    if (Array.isArray(obj)) {\n        returnObject = obj.map((value) => {\n            if (typeof value === 'object')\n                return clone(value, explicit);\n            return value;\n        });\n    }\n    else {\n        returnObject = Object.keys(obj).reduce((newObj, key) => {\n            newObj[key] =\n                typeof obj[key] === 'object'\n                    ? clone(obj[key], explicit)\n                    : obj[key];\n            return newObj;\n        }, {});\n    }\n    for (const key of explicit) {\n        if (key in obj) {\n            Object.defineProperty(returnObject, key, {\n                enumerable: false,\n                value: obj[key],\n            });\n        }\n    }\n    return returnObject;\n}\n/**\n * Clones anything. If the item is scalar, no worries, it passes it back. If it\n * is an object, it performs a (fast/loose) clone operation.\n *\n * @param obj - The value to be cloned.\n *\n * @returns `T`\n *\n * @public\n */\nfunction cloneAny(obj) {\n    return typeof obj === 'object'\n        ? clone(obj)\n        : obj;\n}\n/**\n * Get a specific value via dot notation.\n *\n * @param obj - An object to fetch data from.\n * @param addr - An \"address\" in dot notation.\n *\n * @returns `unknown`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction getAt(obj, addr) {\n    if (!obj || typeof obj !== 'object')\n        return null;\n    const segments = addr.split('.');\n    let o = obj;\n    for (const i in segments) {\n        const segment = segments[i];\n        if (has(o, segment)) {\n            o = o[segment];\n        }\n        if (+i === segments.length - 1)\n            return o;\n        if (!o || typeof o !== 'object')\n            return null;\n    }\n    return null;\n}\n/**\n * Determines if the value of a prop that is either present (true) or not\n * present (undefined). For example, the prop disabled should disable\n * by just existing, but what if it is set to the string \"false\" — then it\n * should not be disabled.\n *\n * @param value - Value to check for undefined.\n *\n * @returns `true | undefined`\n *\n * @public\n */\nfunction undefine(value) {\n    return value !== undefined && value !== 'false' && value !== false\n        ? true\n        : undefined;\n}\n/**\n * Defines an object as an initial value.\n *\n * @param obj - Object to be added an initial value.\n *\n * @returns `T & { __init?: true }`\n *\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nfunction init(obj) {\n    return !Object.isFrozen(obj)\n        ? Object.defineProperty(obj, '__init', {\n            enumerable: false,\n            value: true,\n        })\n        : obj;\n}\n/**\n * Turn any string into a URL/DOM-safe string.\n *\n * @param str - String to be slugified to a URL-safe string.\n *\n * @returns `string`\n *\n * @public\n */\nfunction slugify(str) {\n    return str\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[^a-z0-9]/g, ' ')\n        .trim()\n        .replace(/\\s+/g, '-');\n}\n/**\n * Spreads an object or an array, otherwise returns the same value.\n *\n * @param obj - The object to be spread.\n * @param explicit - The array of items to be explicity spread.\n *\n * @returns `T`\n *\n * @public\n */\nfunction spread(obj, explicit = explicitKeys) {\n    if (obj && typeof obj === 'object') {\n        if (obj instanceof RegExp)\n            return obj;\n        if (obj instanceof Date)\n            return obj;\n        let spread;\n        if (Array.isArray(obj)) {\n            spread = [...obj];\n        }\n        else {\n            spread = { ...obj };\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        return applyExplicit(obj, spread, explicit);\n    }\n    return obj;\n}\n/**\n * Apply non enumerable properties to an object.\n *\n * @param original - Original object\n * @param obj - Objecto to aplly the values\n * @param explicit - Array of items to be explicity added.\n *\n * @returns `T`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction applyExplicit(original, obj, explicit) {\n    for (const key of explicit) {\n        if (key in original) {\n            Object.defineProperty(obj, key, {\n                enumerable: false,\n                value: original[key],\n            });\n        }\n    }\n    return obj;\n}\n/**\n * Uses a global mutation observer to wait for a given element to appear in the\n * DOM.\n * @param childId - The id of the child node.\n * @param callback - The callback to call when the child node is found.\n *\n * @public\n */\nfunction whenAvailable(childId, callback) {\n    if (isBrowser) {\n        const el = document.getElementById(childId);\n        if (el)\n            return callback(el);\n        const observer = new MutationObserver(() => {\n            const el = document.getElementById(childId);\n            if (el) {\n                observer.disconnect();\n                callback(el);\n            }\n        });\n        observer.observe(document.body, { childList: true, subtree: true });\n    }\n}\n/**\n * Given a function only 1 call will be made per call stack. All others will\n * be discarded.\n * @param fn - The function to be called once per tick.\n * @returns\n * @public\n */\nfunction oncePerTick(fn) {\n    let called = false;\n    return ((...args) => {\n        if (called)\n            return;\n        called = true;\n        queueMicrotask(() => (called = false));\n        return fn(...args);\n    });\n}\n\nexport { assignDeep, camel, clone, cloneAny, dedupe, empty, eq, escapeExp, except, extend, getAt, has, init, isObject, isPojo, isQuotedString, isRecord, kebab, nodeProps, nodeType, oncePerTick, only, parseArgs, regexForFormat, rmEscapes, setify, shallowClone, slugify, spread, token, undefine, whenAvailable };\n", "import { token, has, slugify, cloneAny, empty, isObject, init, eq, clone, camel, undefine, kebab, dedupe, parseArgs, getAt, isQuotedString, rmEscapes } from '@formkit/utils';\n\n/**\n * Creates a new dispatcher that allows the addition/removal of middleware\n * functions, and the ability to dispatch a payload to all middleware.\n *\n * @returns FormKitDispatcher\n *\n * @internal\n */\nfunction createDispatcher() {\n    const middleware = [];\n    let currentIndex = 0;\n    const use = (dispatchable) => middleware.push(dispatchable);\n    const dispatch = (payload) => {\n        const current = middleware[currentIndex];\n        if (typeof current === 'function') {\n            return current(payload, (explicitPayload) => {\n                currentIndex++;\n                return dispatch(explicitPayload === undefined ? payload : explicitPayload);\n            });\n        }\n        currentIndex = 0;\n        return payload;\n    };\n    use.dispatch = dispatch;\n    use.unshift = (dispatchable) => middleware.unshift(dispatchable);\n    use.remove = (dispatchable) => {\n        const index = middleware.indexOf(dispatchable);\n        if (index > -1)\n            middleware.splice(index, 1);\n    };\n    return use;\n}\n\n/**\n * Creates a new event emitter, each node uses one of these to allow it to emit\n * events to local listeners and tree listeners.\n *\n * @returns FormKitEventEmitter\n *\n * @internal\n */\nfunction createEmitter() {\n    const listeners = new Map();\n    const receipts = new Map();\n    let buffer = undefined;\n    const emitter = (node, event) => {\n        if (buffer) {\n            buffer.set(event.name, [node, event]);\n            return;\n        }\n        if (listeners.has(event.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            listeners.get(event.name).forEach((wrapper) => {\n                if (event.origin === node || wrapper.modifiers.includes('deep')) {\n                    wrapper.listener(event);\n                }\n            });\n        }\n        if (event.bubble) {\n            node.bubble(event);\n        }\n    };\n    /**\n     * Completely remove all listeners and receipts and buffers from the emitter.\n     */\n    emitter.flush = () => {\n        listeners.clear();\n        receipts.clear();\n        buffer === null || buffer === void 0 ? void 0 : buffer.clear();\n    };\n    /**\n     * Add an event listener\n     *\n     * @param eventName - The name of the event to listen to\n     * @param listener - The callback\n     *\n     * @returns string\n     *\n     * @internal\n     */\n    emitter.on = (eventName, listener) => {\n        const [event, ...modifiers] = eventName.split('.');\n        const receipt = listener.receipt || token();\n        const wrapper = {\n            modifiers,\n            event,\n            listener,\n            receipt,\n        };\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n        listeners.has(event)\n            ? listeners.get(event).push(wrapper)\n            : listeners.set(event, [wrapper]);\n        receipts.has(receipt)\n            ? receipts.get(receipt).push(event)\n            : receipts.set(receipt, [event]);\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        return receipt;\n    };\n    /**\n     * Remove an event listener\n     *\n     * @param listenerOrReceipt - Either a receipt or the callback function.\n     *\n     * @internal\n     */\n    emitter.off = (receipt) => {\n        var _a;\n        if (receipts.has(receipt)) {\n            (_a = receipts.get(receipt)) === null || _a === void 0 ? void 0 : _a.forEach((event) => {\n                const eventListeners = listeners.get(event);\n                if (Array.isArray(eventListeners)) {\n                    listeners.set(event, eventListeners.filter((wrapper) => wrapper.receipt !== receipt));\n                }\n            });\n            receipts.delete(receipt);\n        }\n    };\n    /**\n     * Pause emitting values. Any events emitted while paused will not be emitted\n     * but rather \"stored\" — and whichever events are emitted last will be output.\n     * For example:\n     * pause()\n     * emit('foo', 1)\n     * emit('foo', 2)\n     * emit('bar', 3)\n     * emit('bar', 4)\n     * play()\n     * // would result in\n     * emit('foo', 2)\n     * emit('bar', 4)\n     * Optionally pauses all children as well.\n     *\n     * @param node - A node to pause all children on.\n     *\n     * @internal\n     */\n    emitter.pause = (node) => {\n        if (!buffer)\n            buffer = new Map();\n        if (node) {\n            node.walk((child) => child._e.pause());\n        }\n    };\n    /**\n     * Release the current event buffer.\n     *\n     * @param node - A node to unpause all children on.\n     *\n     * @internal\n     */\n    emitter.play = (node) => {\n        if (!buffer)\n            return;\n        const events = buffer;\n        buffer = undefined;\n        events.forEach(([node, event]) => emitter(node, event));\n        if (node) {\n            node.walk((child) => child._e.play());\n        }\n    };\n    return emitter;\n}\n/**\n * Emit an event from this node.\n *\n * @param node - The node that is emitting\n * @param context - The context of that node\n * @param name - The name of the event\n * @param payload - The payload to emit\n *\n * @returns FormKitNode\n *\n * @internal\n */\nfunction emit$1(node, context, name, payload, // eslint-disable-line @typescript-eslint/explicit-module-boundary-types,\nbubble = true) {\n    context._e(node, {\n        payload,\n        name,\n        bubble,\n        origin: node,\n    });\n    return node;\n}\n/**\n * Send an event from the given node up it's ancestor tree.\n *\n * @param node -\n * @param _context -\n * @param event -\n *\n * @internal\n */\nfunction bubble(node, _context, event) {\n    if (isNode(node.parent)) {\n        node.parent._e(node.parent, event);\n    }\n    return node;\n}\n/**\n * Adds an event listener to the node for a specific event. The event name is a\n * simple string matching the name of the event to listen to. It can optionally\n * include modifiers like eventName.deep\n *\n * @param node -\n * @param context -\n * @param name -\n * @param listener -\n *\n * @returns FormKitNode\n *\n * @internal\n */\nfunction on(_node, context, name, listener) {\n    return context._e.on(name, listener);\n}\n/**\n * Removes an event listener from a node by the returned receipt from .on().\n *\n * @param node - The node to remote the listener from\n * @param context - The context to remove\n * @param receipt - The receipt returned by .on()\n *\n * @returns FormKitNode\n *\n * @internal\n */\nfunction off(node, context, receipt) {\n    context._e.off(receipt);\n    return node;\n}\n\n/**\n * FormKit's global error handler.\n *\n * @public\n */\nconst errorHandler = createDispatcher();\nerrorHandler((error, next) => {\n    if (!error.message)\n        error.message = String(`E${error.code}`);\n    return next(error);\n});\n/**\n * FormKit's global warning handler.\n *\n * @public\n */\nconst warningHandler = createDispatcher();\nwarningHandler((warning, next) => {\n    if (!warning.message)\n        warning.message = String(`W${warning.code}`);\n    const result = next(warning);\n    if (console && typeof console.warn === 'function')\n        console.warn(result.message);\n    return result;\n});\n/**\n * Globally emits a warning.\n *\n * @param code - The integer warning code.\n * @param data - Usually an object of information to include.\n *\n * @public\n */\nfunction warn(code, data = {}) {\n    warningHandler.dispatch({ code, data });\n}\n/**\n * Emits an error. Generally should result in an exception.\n *\n * @param code - The integer error code.\n * @param data - Usually an object of information to include.\n *\n * @public\n */\nfunction error(code, data = {}) {\n    throw Error(errorHandler.dispatch({ code, data }).message);\n}\n\n/**\n * Creates a new FormKitMessage object.\n *\n * @param conf - An object of optional properties of {@link FormKitMessage | FormKitMessage}.\n * @param node - A {@link @formkit/node#FormKitNode | FormKitNode}.\n *\n * @returns A {@link FormKitMessageProps | FormKitMessageProps}.\n *\n * @public\n */\nfunction createMessage(conf, node) {\n    const m = {\n        blocking: false,\n        key: token(),\n        meta: {},\n        type: 'state',\n        visible: true,\n        ...conf,\n    };\n    if (node && m.value && m.meta.localize !== false) {\n        m.value = node.t(m);\n        m.meta.locale = node.config.locale;\n    }\n    return m;\n}\n/**\n * The available traps on the node's store.\n *\n * @internal\n */\nconst storeTraps = {\n    apply: applyMessages,\n    set: setMessage,\n    remove: removeMessage,\n    filter: filterMessages,\n    reduce: reduceMessages,\n    release: releaseBuffer,\n    touch: touchMessages,\n};\n/**\n * Creates a new FormKit message store.\n *\n * @internal\n */\nfunction createStore(_buffer = false) {\n    const messages = {};\n    let node;\n    let buffer = _buffer;\n    let _b = [];\n    const _m = new Map();\n    let _r = undefined;\n    const store = new Proxy(messages, {\n        get(...args) {\n            const [_target, property] = args;\n            if (property === 'buffer')\n                return buffer;\n            if (property === '_b')\n                return _b;\n            if (property === '_m')\n                return _m;\n            if (property === '_r')\n                return _r;\n            if (has(storeTraps, property)) {\n                return storeTraps[property].bind(null, messages, store, node);\n            }\n            return Reflect.get(...args);\n        },\n        set(_t, prop, value) {\n            if (prop === '_n') {\n                node = value;\n                if (_r === '__n')\n                    releaseMissed(node, store);\n                return true;\n            }\n            else if (prop === '_b') {\n                _b = value;\n                return true;\n            }\n            else if (prop === 'buffer') {\n                buffer = value;\n                return true;\n            }\n            else if (prop === '_r') {\n                _r = value;\n                return true;\n            }\n            error(101, node);\n            return false;\n        },\n    });\n    return store;\n}\n/**\n * Adds a new value to a FormKit message bag.\n *\n * @param messageStore - The message store itself\n * @param store - The store interface\n * @param node - The node this store belongs to\n * @param message - The message object\n *\n * @internal\n */\nfunction setMessage(messageStore, store, node, message) {\n    if (store.buffer) {\n        store._b.push([[message]]);\n        return store;\n    }\n    if (messageStore[message.key] !== message) {\n        if (typeof message.value === 'string' && message.meta.localize !== false) {\n            // Expose the value to translation\n            const previous = message.value;\n            message.value = node.t(message);\n            if (message.value !== previous) {\n                message.meta.locale = node.props.locale;\n            }\n        }\n        const e = `message-${has(messageStore, message.key) ? 'updated' : 'added'}`;\n        messageStore[message.key] = Object.freeze(node.hook.message.dispatch(message));\n        node.emit(e, message);\n    }\n    return store;\n}\n/**\n * Run through each message in the store, and ensure it has been translated\n * to the proper language. This most frequently happens after a locale change.\n *\n * @internal\n */\nfunction touchMessages(messageStore, store) {\n    for (const key in messageStore) {\n        const message = { ...messageStore[key] };\n        store.set(message);\n    }\n}\n/**\n * Remove a message from the store.\n *\n * @param messageStore - The message store\n * @param store - The store interface\n * @param node - The node this store belongs to\n * @param key - The message key\n *\n * @returns FormKitStore\n *\n * @internal\n */\nfunction removeMessage(messageStore, store, node, key) {\n    if (has(messageStore, key)) {\n        const message = messageStore[key];\n        delete messageStore[key];\n        node.emit('message-removed', message);\n    }\n    if (store.buffer === true) {\n        store._b = store._b.filter((buffered) => {\n            buffered[0] = buffered[0].filter((m) => m.key !== key);\n            return buffered[1] || buffered[0].length;\n        });\n    }\n    return store;\n}\n/**\n * Iterates over all messages removing those that are no longer wanted.\n *\n * @param messageStore - The store itself\n * @param store - The store interface\n * @param node - The node to filter for\n * @param callback - A callback accepting a message and returning a boolean\n * @param type - Pre filtered by a given message type\n *\n * @internal\n */\nfunction filterMessages(messageStore, store, node, callback, type) {\n    for (const key in messageStore) {\n        const message = messageStore[key];\n        if ((!type || message.type === type) && !callback(message)) {\n            removeMessage(messageStore, store, node, key);\n        }\n    }\n}\n/**\n * Reduce the message store to some other generic value.\n *\n * @param messageStore - The store itself\n * @param _store - Unused but curried — the store interface itself\n * @param _node - The node owner of this store\n * @param reducer - The callback that performs the reduction\n * @param accumulator - The initial value\n *\n * @returns\n *\n * @internal\n */\nfunction reduceMessages(messageStore, _store, _node, reducer, accumulator) {\n    for (const key in messageStore) {\n        const message = messageStore[key];\n        accumulator = reducer(accumulator, message);\n    }\n    return accumulator;\n}\n/**\n * @param messageStore - The store itself\n * @param _store - Unused but curried — the store interface itself\n * @param node - The node owner of this store\n * @param messages - An array of FormKitMessages to apply to this input, or an object of messages to apply to children.\n *\n * @internal\n */\nfunction applyMessages(_messageStore, store, node, messages, clear) {\n    if (Array.isArray(messages)) {\n        if (store.buffer) {\n            store._b.push([messages, clear]);\n            return;\n        }\n        // In this case we are applying messages to this node’s store.\n        const applied = new Set(messages.map((message) => {\n            store.set(message);\n            return message.key;\n        }));\n        // Remove any messages that were not part of the initial apply:\n        if (typeof clear === 'string') {\n            store.filter((message) => message.type !== clear || applied.has(message.key));\n        }\n        else if (typeof clear === 'function') {\n            store.filter((message) => !clear(message) || applied.has(message.key));\n        }\n    }\n    else {\n        for (const address in messages) {\n            const child = node.at(address);\n            if (child) {\n                child.store.apply(messages[address], clear);\n            }\n            else {\n                missed(node, store, address, messages[address], clear);\n            }\n        }\n    }\n}\n/**\n * Creates an array of message arrays from strings.\n *\n * @param node - FormKitNode\n * @param errors - Arrays or objects of form errors or input errors\n *\n * @internal\n */\nfunction createMessages(node, ...errors) {\n    const sourceKey = `${node.name}-set`;\n    const make = (error) => createMessage({\n        key: slugify(error),\n        type: 'error',\n        value: error,\n        meta: { source: sourceKey, autoClear: true },\n    });\n    return errors\n        .filter((m) => !!m)\n        .map((errorSet) => {\n        if (typeof errorSet === 'string')\n            errorSet = [errorSet];\n        if (Array.isArray(errorSet)) {\n            return errorSet.map((error) => make(error));\n        }\n        else {\n            const errors = {};\n            for (const key in errorSet) {\n                if (Array.isArray(errorSet[key])) {\n                    errors[key] = errorSet[key].map((error) => make(error));\n                }\n                else {\n                    errors[key] = [make(errorSet[key])];\n                }\n            }\n            return errors;\n        }\n    });\n}\n/**\n * @param store - The store to apply this missed applications.\n * @param address - The address that was missed (a node path that didn't yet exist)\n * @param messages - The messages that should have been applied.\n * @param clear - The clearing function (if any)\n *\n * @internal\n */\nfunction missed(node, store, address, messages, clear) {\n    var _a;\n    const misses = store._m;\n    if (!misses.has(address))\n        misses.set(address, []);\n    // The created receipt\n    if (!store._r)\n        store._r = releaseMissed(node, store);\n    (_a = misses.get(address)) === null || _a === void 0 ? void 0 : _a.push([messages, clear]);\n}\n/**\n * Releases messages that were applied to a child via parent, but the child did\n * not exist. Once the child does exist, the created event for that child will\n * bubble to this point, and any stored applications will be applied serially.\n *\n * @param store - The store object.\n *\n * @internal\n */\nfunction releaseMissed(node, store) {\n    return node.on('child.deep', ({ payload: child }) => {\n        store._m.forEach((misses, address) => {\n            if (node.at(address) === child) {\n                misses.forEach(([messages, clear]) => {\n                    child.store.apply(messages, clear);\n                });\n                store._m.delete(address);\n            }\n        });\n        // If all the stored misses were applied, remove the listener.\n        if (store._m.size === 0 && store._r) {\n            node.off(store._r);\n            store._r = undefined;\n        }\n    });\n}\n/**\n * Iterates over all buffered messages and applies them in sequence.\n *\n * @param messageStore - The store itself\n * @param store - The store interface\n * @param node - The node to filter for\n *\n * @internal\n */\nfunction releaseBuffer(_messageStore, store) {\n    store.buffer = false;\n    store._b.forEach(([messages, clear]) => store.apply(messages, clear));\n    store._b = [];\n}\n\n/**\n * Creates a new ledger for use on a single node's context.\n *\n * @internal\n */\nfunction createLedger() {\n    const ledger = {};\n    let n;\n    return {\n        count: (...args) => createCounter(n, ledger, ...args),\n        init(node) {\n            n = node;\n            node.on('message-added.deep', add(ledger, 1));\n            node.on('message-removed.deep', add(ledger, -1));\n        },\n        merge: (child) => merge(n, ledger, child),\n        settled(counterName) {\n            return has(ledger, counterName)\n                ? ledger[counterName].promise\n                : Promise.resolve();\n        },\n        unmerge: (child) => merge(n, ledger, child, true),\n        value(counterName) {\n            return has(ledger, counterName) ? ledger[counterName].count : 0;\n        },\n    };\n}\n/**\n * Creates a new counter object in the counting ledger.\n *\n * @param node - FormKitNode\n * @param ledger - The actual ledger storage object\n * @param counterName - The name of the counter, can be arbitrary\n * @param condition - The condition function (or string) that filters messages\n * @param increment - The increment value\n *\n * @internal\n */\nfunction createCounter(node, ledger, counterName, condition, increment = 0) {\n    condition = parseCondition(condition || counterName);\n    if (!has(ledger, counterName)) {\n        const counter = {\n            condition,\n            count: 0,\n            name: counterName,\n            node,\n            promise: Promise.resolve(),\n            resolve: () => { }, // eslint-disable-line @typescript-eslint/no-empty-function\n        };\n        ledger[counterName] = counter;\n        increment = node.store.reduce((sum, m) => sum + counter.condition(m) * 1, increment);\n        node.each((child) => {\n            child.ledger.count(counter.name, counter.condition);\n            increment += child.ledger.value(counter.name);\n        });\n    }\n    return count(ledger[counterName], increment).promise;\n}\n/**\n * We parse the condition to allow flexibility in how counters are specified.\n *\n * @param condition - The condition that, if true, allows a message to change a counter's value\n *\n * @internal\n */\nfunction parseCondition(condition) {\n    if (typeof condition === 'function') {\n        return condition;\n    }\n    return (m) => m.type === condition;\n}\n/**\n * Perform a counting action on the a given counter object of the ledger.\n *\n * @param counter - A counter object\n * @param increment - The amount by which we are changing the count value\n *\n * @internal\n */\nfunction count(counter, increment) {\n    const initial = counter.count;\n    const post = counter.count + increment;\n    counter.count = post;\n    if (initial === 0 && post !== 0) {\n        counter.node.emit(`unsettled:${counter.name}`, counter.count, false);\n        counter.promise = new Promise((r) => (counter.resolve = r));\n    }\n    else if (initial !== 0 && post === 0) {\n        counter.node.emit(`settled:${counter.name}`, counter.count, false);\n        counter.resolve();\n    }\n    counter.node.emit(`count:${counter.name}`, counter.count, false);\n    return counter;\n}\n/**\n * Returns a function to be used as an event listener for message events.\n *\n * @param ledger - A ledger to operate on\n * @param delta - The amount to add or subtract\n *\n * @internal\n */\nfunction add(ledger, delta) {\n    return (e) => {\n        for (const name in ledger) {\n            const counter = ledger[name];\n            if (counter.condition(e.payload)) {\n                count(counter, delta);\n            }\n        }\n    };\n}\n/**\n * Given a child node, add the parent node's counters to the child and then\n * rectify the upstream ledger counts. Generally used when attaching a child\n * to an already counted tree.\n *\n * @param parent - The parent that is \"receiving\" the child\n * @param ledger - The ledger object\n * @param child - The child (can be a subtree) that is being attached\n * @param remove - If the merge is removing instead of adding\n *\n * @internal\n */\nfunction merge(parent, ledger, child, remove = false) {\n    for (const key in ledger) {\n        const condition = ledger[key].condition;\n        if (!remove)\n            child.ledger.count(key, condition);\n        const increment = child.ledger.value(key) * (remove ? -1 : 1);\n        if (!parent)\n            continue;\n        do {\n            parent.ledger.count(key, condition, increment);\n            parent = parent.parent;\n        } while (parent);\n    }\n}\n\n/**\n * A global registry of nodes by their alias or name (if root).\n */\nconst registry = new Map();\nconst reflected = new Map();\n/**\n * An event emitter for registered/set/unset nodes\n */\nconst emit = createEmitter();\n/**\n * Receipts of listeners.\n */\nconst receipts = [];\n/**\n * Registers a node to the registry _if_ the node is a root node, _or_ if the\n * node has an explicit node.props.alias. If these two things are not true,\n * then no node is registered (idempotent).\n *\n * @param node - A {@link FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction register(node) {\n    if (node.props.id) {\n        registry.set(node.props.id, node);\n        reflected.set(node, node.props.id);\n        emit(node, {\n            payload: node,\n            name: node.props.id,\n            bubble: false,\n            origin: node,\n        });\n    }\n}\n/**\n * Deregister a node from the registry.\n *\n * @param node - A {@link FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction deregister(node) {\n    if (reflected.has(node)) {\n        const id = reflected.get(node); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        reflected.delete(node);\n        registry.delete(id);\n        emit(node, {\n            payload: null,\n            name: id,\n            bubble: false,\n            origin: node,\n        });\n    }\n}\n/**\n * Get a node by a particular id.\n *\n * @param id - Get a node by a given id.\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`.\n *\n * @public\n */\nfunction getNode$1(id) {\n    return registry.get(id);\n}\n/**\n * Resets the entire registry. Deregisters all nodes and removes all listeners.\n *\n * @public\n */\nfunction resetRegistry() {\n    registry.forEach((node) => {\n        deregister(node);\n    });\n    receipts.forEach((receipt) => emit.off(receipt));\n}\n/**\n * A way of watching changes in the global registry.\n *\n * @param id - A dot-syntax id where the node is located.\n * @param callback - A callback in the format of {@link FormKitEventListener | FormKitEventListener} to notify when the node is set or removed.\n *\n * @public\n */\nfunction watchRegistry(id, callback) {\n    // register a listener\n    receipts.push(emit.on(id, callback));\n}\n\n/**\n * Applies a given config change to the node.\n *\n * @param node - The node to check for config change\n * @param prop - Checks if this property exists in the local config or props\n * @param value - The value to set\n *\n * @internal\n */\nfunction configChange(node, prop, value) {\n    // When we return false, node.walk will not continue into that child.\n    let usingFallback = true;\n    !(prop in node.config._t)\n        ? node.emit(`config:${prop}`, value, false)\n        : (usingFallback = false);\n    if (!(prop in node.props)) {\n        node.emit('prop', { prop, value });\n        node.emit(`prop:${prop}`, value);\n    }\n    return usingFallback;\n}\n/**\n * Creates a new instance of a global configuration option. This object is\n * essentially just a FormKitOption object, but it can be used as the root for\n * FormKitConfig's proxy and retain event \"emitting\".\n *\n * @param options - An object of optional properties of {@link FormKitConfig | FormKitConfig}.\n *\n * @returns A {@link FormKitRootConfig | FormKitRootConfig}.\n *\n * @public\n */\nfunction createConfig$1(options = {}) {\n    const nodes = new Set();\n    const target = {\n        ...options,\n        ...{\n            _add: (node) => nodes.add(node),\n            _rm: (node) => nodes.delete(node),\n        },\n    };\n    const rootConfig = new Proxy(target, {\n        set(t, prop, value, r) {\n            if (typeof prop === 'string') {\n                nodes.forEach((node) => configChange(node, prop, value));\n            }\n            return Reflect.set(t, prop, value, r);\n        },\n    });\n    return rootConfig;\n}\n\n/**\n * Submits a FormKit form programmatically.\n *\n * @param id - The id of the form.\n *\n * @public\n */\nfunction submitForm(id) {\n    const formElement = document.getElementById(id);\n    if (formElement instanceof HTMLFormElement) {\n        const event = new Event('submit', { cancelable: true, bubbles: true });\n        formElement.dispatchEvent(event);\n        return;\n    }\n    warn(151, id);\n}\n\n/**\n * Clear all state and error messages.\n *\n * @internal\n */\nfunction clearState(node) {\n    const clear = (n) => {\n        for (const key in n.store) {\n            const message = n.store[key];\n            if (message.type === 'error' ||\n                (message.type === 'ui' && key === 'incomplete')) {\n                n.store.remove(key);\n            }\n            else if (message.type === 'state') {\n                n.store.set({ ...message, value: false });\n            }\n        }\n    };\n    clear(node);\n    node.walk(clear);\n}\n/**\n * Resets an input to its \"initial\" value. If the input is a group or list it\n * resets all the children as well.\n *\n * @param id - The id of an input to reset.\n * @param resetTo - A value to reset the node to.\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`.\n *\n * @public\n */\nfunction reset(id, resetTo) {\n    const node = typeof id === 'string' ? getNode$1(id) : id;\n    if (node) {\n        const initial = (n) => cloneAny(n.props.initial) ||\n            (n.type === 'group' ? {} : n.type === 'list' ? [] : undefined);\n        // pause all events in this tree.\n        node._e.pause(node);\n        // Set it back to basics\n        const resetValue = cloneAny(resetTo);\n        if (resetTo && !empty(resetTo)) {\n            node.props.initial = isObject(resetValue) ? init(resetValue) : resetValue;\n        }\n        node.input(initial(node), false);\n        // Set children back to basics in case they were additive (had their own value for example)\n        node.walk((child) => child.input(initial(child), false));\n        // Finally we need to lay any values back on top (if it is a group/list) since group values\n        // take precedence over child values.\n        node.input(empty(resetValue) && resetValue ? resetValue : initial(node), false);\n        // release the events.\n        node._e.play(node);\n        clearState(node);\n        node.emit('reset', node);\n        return node;\n    }\n    warn(152, id);\n    return;\n}\n\n/**\n * Default configuration options.\n */\nconst defaultConfig = {\n    delimiter: '.',\n    delay: 0,\n    locale: 'en',\n    rootClasses: (key) => ({ [`formkit-${kebab(key)}`]: true }),\n};\n/**\n * If a node’s name is set to useIndex, it replaces the node’s name with the\n * index of the node relative to its parent’s children.\n *\n * @internal\n */\nconst useIndex = Symbol('index');\n/**\n * When propagating values up a tree, this value indicates the child should be\n * removed.\n *\n * @internal\n */\nconst valueRemoved = Symbol('removed');\n/**\n * When propagating values up a tree, this value indicates the child should be\n * moved.\n *\n * @internal\n */\nconst valueMoved = Symbol('moved');\n/**\n * When creating a new node and having its value injected directly at a specific\n * location.\n *\n * @internal\n */\nconst valueInserted = Symbol('inserted');\n/**\n * A simple type guard to determine if the context being evaluated is a list\n * type.\n *\n * @param arg - A {@link FormKitContextShape | FormKitContextShape}.\n *\n * @returns Returns a `boolean`.\n *\n * @public\n */\nfunction isList(arg) {\n    return arg.type === 'list' && Array.isArray(arg._value);\n}\n/**\n * Determine if a given object is a node.\n *\n * @example\n *\n * ```javascript\n * import { isNode, createNode } from '@formkit/core'\n *\n * const input = createNode({\n *   type: 'input', // defaults to 'input' if not specified\n *   value: 'hello node world',\n * })\n *\n * const obj = {};\n *\n * isNode(obj)\n * // false\n *\n * isNode(input)\n * // true\n * ```\n *\n * @param node - Any value.\n *\n * @returns Returns a `boolean`.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction isNode(node) {\n    return node && typeof node === 'object' && node.__FKNode__ === true;\n}\n/**\n * The setter you are trying to access is invalid.\n */\nconst invalidSetter = (node, _context, property) => {\n    error(102, [node, property]);\n};\nconst traps = {\n    _c: trap(getContext, invalidSetter, false),\n    add: trap(addChild),\n    addProps: trap(addProps),\n    address: trap(getAddress, invalidSetter, false),\n    at: trap(getNode),\n    bubble: trap(bubble),\n    clearErrors: trap(clearErrors$1),\n    calm: trap(calm),\n    config: trap(false),\n    define: trap(define),\n    disturb: trap(disturb),\n    destroy: trap(destroy),\n    extend: trap(extend),\n    hydrate: trap(hydrate),\n    index: trap(getIndex, setIndex, false),\n    input: trap(input),\n    each: trap(eachChild),\n    emit: trap(emit$1),\n    find: trap(find),\n    on: trap(on),\n    off: trap(off),\n    parent: trap(false, setParent),\n    plugins: trap(false),\n    remove: trap(removeChild),\n    root: trap(getRoot, invalidSetter, false),\n    reset: trap(resetValue),\n    resetConfig: trap(resetConfig),\n    setErrors: trap(setErrors$1),\n    submit: trap(submit),\n    t: trap(text),\n    use: trap(use),\n    name: trap(getName, false, false),\n    walk: trap(walkTree),\n};\n/**\n * These are all the available \"traps\" for a given node. You can think of these\n * a little bit like methods, but they are really Proxy interceptors.\n */\nfunction createTraps() {\n    return new Map(Object.entries(traps));\n}\n/**\n * Creates a getter/setter trap and curries the context/node pair\n *\n * @param getter - The getter function\n * @param setter - The setter function\n * @param curryGetter - Indicates if the getter should be curried or not\n *\n * @returns A {@link FormKitTrap | FormKitTrap}\n */\nfunction trap(getter, setter, curryGetter = true) {\n    return {\n        get: getter\n            ? (node, context) => curryGetter\n                ? (...args) => getter(node, context, ...args)\n                : getter(node, context)\n            : false,\n        set: setter !== undefined ? setter : invalidSetter.bind(null),\n    };\n}\n/**\n * Create all of the node's hook dispatchers.\n */\nfunction createHooks() {\n    const hooks = new Map();\n    return new Proxy(hooks, {\n        get(_, property) {\n            if (!hooks.has(property)) {\n                hooks.set(property, createDispatcher());\n            }\n            return hooks.get(property);\n        },\n    });\n}\n/**\n * This is a simple integer counter of every createName() where the name needs\n * to be generated.\n */\nlet nameCount = 0;\n/**\n * This is a simple integer counter of every default id created.\n */\nlet idCount = 0;\n/**\n * Resets the global number of node registrations, useful for deterministic\n * node naming.\n *\n * @public\n */\nfunction resetCount() {\n    nameCount = 0;\n    idCount = 0;\n}\n/**\n * Create a name-based dictionary of all children in an array.\n *\n * @param children - An array of {@link FormKitNode | FormKitNode}.\n *\n * @returns A dictionary of named {@link FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction names(children) {\n    return children.reduce((named, child) => Object.assign(named, { [child.name]: child }), {});\n}\n/**\n * This node is responsible for deterministically generating an id for this\n * node. This cannot just be a random id, it _must_ be deterministic to ensure\n * re-hydration of the form (like post-SSR) produces the same names/ids.\n *\n * @param options - A {@link FormKitOptions | FormKitOptions}\n *\n * @returns `string | symbol`\n *\n * @internal\n */\nfunction createName(options) {\n    var _a, _b;\n    if (((_a = options.parent) === null || _a === void 0 ? void 0 : _a.type) === 'list')\n        return useIndex;\n    return options.name || `${((_b = options.props) === null || _b === void 0 ? void 0 : _b.type) || 'input'}_${++nameCount}`;\n}\n/**\n * Creates the initial value for a node based on the options passed in and the\n * type of the input.\n *\n * @param options - A {@link FormKitOptions | FormKitOptions}.\n *\n * @returns `unknown`\n *\n * @public\n */\nfunction createValue(options) {\n    if (options.type === 'group') {\n        return init(options.value &&\n            typeof options.value === 'object' &&\n            !Array.isArray(options.value)\n            ? options.value\n            : {});\n    }\n    else if (options.type === 'list') {\n        return init(Array.isArray(options.value) ? options.value : []);\n    }\n    return options.value;\n}\n/**\n * Sets the internal value of the node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param value - A input value to the node\n * @param async - If its an async call\n *\n * @returns `Promise<unknown>`\n *\n * @internal\n */\nfunction input(node, context, value, async = true) {\n    context._value = validateInput(node, node.hook.input.dispatch(value));\n    node.emit('input', context._value);\n    if (node.isCreated &&\n        node.type === 'input' &&\n        eq(context._value, context.value)) {\n        node.emit('commitRaw', context.value);\n        // Perform an early return if the value hasn't changed during this input.\n        return context.settled;\n    }\n    if (context.isSettled)\n        node.disturb();\n    if (async) {\n        if (context._tmo)\n            clearTimeout(context._tmo);\n        context._tmo = setTimeout(commit, node.props.delay, node, context);\n    }\n    else {\n        commit(node, context);\n    }\n    return context.settled;\n}\n/**\n * Validate that the current input is allowed.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param value - The value that is being validated\n *\n * @returns `T`\n *\n * @internal\n */\nfunction validateInput(node, value) {\n    switch (node.type) {\n        // Inputs are allowed to have any type\n        case 'input':\n            break;\n        case 'group':\n            if (!value || typeof value !== 'object')\n                error(107, [node, value]);\n            break;\n        case 'list':\n            if (!Array.isArray(value))\n                error(108, [node, value]);\n            break;\n    }\n    return value;\n}\n/**\n * Commits the working value to the node graph as the value of this node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param calm - If it calms the node\n * @param hydrate - If it hydrates the node\n *\n * @internal\n */\nfunction commit(node, context, calm = true, hydrate = true) {\n    context._value = context.value = node.hook.commit.dispatch(context._value);\n    if (node.type !== 'input' && hydrate)\n        node.hydrate();\n    node.emit('commitRaw', context.value);\n    node.emit('commit', context.value);\n    if (calm)\n        node.calm();\n}\n/**\n * Perform a modification to a single element of a parent aggregate value. This\n * is only performed on the pre-committed value (_value), although typically\n * the value and _value are both linked in memory.\n *\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction partial(context, { name, value, from }) {\n    if (Object.isFrozen(context._value))\n        return;\n    if (isList(context)) {\n        const insert = value === valueRemoved\n            ? []\n            : value === valueMoved && typeof from === 'number'\n                ? context._value.splice(from, 1)\n                : [value];\n        context._value.splice(name, value === valueMoved || from === valueInserted ? 0 : 1, ...insert);\n        return;\n    }\n    // In this case we know for sure we're dealing with a group, TS doesn't\n    // know that however, so we use some unpleasant casting here\n    if (value !== valueRemoved) {\n        context._value[name] = value;\n    }\n    else {\n        delete context._value[name];\n    }\n}\n/**\n * Hydrate node and its children\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction hydrate(node, context) {\n    const _value = context._value;\n    // For \"synced\" lists the underlying nodes need to be synced to their values\n    // before hydration.\n    if (node.type === 'list' && node.sync)\n        syncListNodes(node, context);\n    context.children.forEach((child) => {\n        if (typeof _value !== 'object')\n            return;\n        if (child.name in _value) {\n            // In this case, the parent has a value to give to the child, so we\n            // perform a down-tree synchronous input which will cascade values down\n            // and then ultimately back up.\n            const childValue = child.type !== 'input' ||\n                (_value[child.name] && typeof _value[child.name] === 'object')\n                ? init(_value[child.name])\n                : _value[child.name];\n            // If the two are already equal or the child is currently disturbed then\n            // don’t send the value down since it will squash the child’s value.\n            if (!child.isSettled ||\n                (!isObject(childValue) && eq(childValue, child._value)))\n                return;\n            // If there is a change to the child, push the new value down.\n            child.input(childValue, false);\n        }\n        else {\n            if (node.type !== 'list' || typeof child.name === 'number') {\n                // In this case, the parent’s values have no knowledge of the child\n                // value — this typically occurs on the commit at the end of addChild()\n                // we need to create a value reservation for this node’s name. This is\n                // especially important when dealing with lists where index matters.\n                partial(context, { name: child.name, value: child.value });\n            }\n            if (!_value.__init) {\n                // In this case, someone has explicitly set the value to an empty object\n                // with node.input({}) so we do not define the __init property:\n                if (child.type === 'group')\n                    child.input({}, false);\n                else if (child.type === 'list')\n                    child.input([], false);\n                else\n                    child.input(undefined, false);\n            }\n        }\n    });\n    return node;\n}\n/**\n * Hydrate a list node and its children. There are some assumptions about the\n * child nodes that are made here:\n * 1. The child nodes are either:\n *    - Are scalars and their values can be exchanged.\n *    - Are groups and should maintain node identity.\n * 2. The value of the list will be a 1-1 representation of the children.\n * 3. If new values are *added* to the list, those nodes must be created by some\n *   other means — adding a value does not add a node automatically.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n */\nfunction syncListNodes(node, context) {\n    const _value = node._value;\n    if (!Array.isArray(_value))\n        return;\n    const newChildren = [];\n    const unused = new Set(context.children);\n    const placeholderValues = new Map();\n    // 1. Iterate over the values and if the values at the same index are equal\n    //    then we can reuse the node. Otherwise we add a `null` placeholder.\n    _value.forEach((value, i) => {\n        if (context.children[i] && context.children[i]._value === value) {\n            newChildren.push(context.children[i]);\n            unused.delete(context.children[i]);\n        }\n        else {\n            newChildren.push(null);\n            const indexes = placeholderValues.get(value) || [];\n            indexes.push(i);\n            placeholderValues.set(value, indexes);\n        }\n    });\n    // 2. If there are unused nodes, and there are null nodes in the new children\n    //    then we attempt to match those irregardless of their index.\n    if (unused.size && placeholderValues.size) {\n        unused.forEach((child) => {\n            if (placeholderValues.has(child._value)) {\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                const indexes = placeholderValues.get(child._value);\n                const index = indexes.shift();\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                newChildren[index] = child;\n                unused.delete(child);\n                if (!indexes.length)\n                    placeholderValues.delete(child._value);\n            }\n        });\n    }\n    // 3. If there are still unused nodes, and unused placeholders, we assign the\n    //    unused nodes to the unused placeholders in order.\n    const emptyIndexes = [];\n    placeholderValues.forEach((indexes) => {\n        emptyIndexes.push(...indexes);\n    });\n    while (unused.size && emptyIndexes.length) {\n        const child = unused.values().next().value;\n        const index = emptyIndexes.shift();\n        if (index === undefined)\n            break;\n        newChildren[index] = child;\n        unused.delete(child);\n    }\n    // 4. If there are placeholders in the children, we create true placeholders.\n    emptyIndexes.forEach((index, value) => {\n        newChildren[index] = createPlaceholder({ value });\n    });\n    // 5. If there are unused nodes, we remove them. To ensure we don’t remove any\n    //    values we explicitly remove each child’s parent and manually unmerge the\n    //    child from the parent’s ledger before destroying the subtree.\n    if (unused.size) {\n        unused.forEach((child) => {\n            if (!('__FKP' in child)) {\n                const parent = child._c.parent;\n                if (!parent || isPlaceholder(parent))\n                    return;\n                parent.ledger.unmerge(child);\n                child._c.parent = null;\n                child.destroy();\n            }\n        });\n    }\n    // 6. Finally, we assign the new children to the context.\n    context.children = newChildren;\n}\n/**\n * Disturbs the state of a node from settled to unsettled — creating appropriate\n * promises and resolutions.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction disturb(node, context) {\n    var _a;\n    if (context._d <= 0) {\n        context.isSettled = false;\n        node.emit('settled', false, false);\n        context.settled = new Promise((resolve) => {\n            context._resolve = resolve;\n        });\n        if (node.parent)\n            (_a = node.parent) === null || _a === void 0 ? void 0 : _a.disturb();\n    }\n    context._d++;\n    return node;\n}\n/**\n * Calms the given node's disturbed state by one.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param value - A {@link FormKitChildValue | FormKitChildValue}\n *\n * @internal\n */\nfunction calm(node, context, value) {\n    var _a;\n    if (value !== undefined && node.type !== 'input') {\n        partial(context, value);\n        // Commit the value up, but do not hydrate back down\n        return commit(node, context, true, false);\n    }\n    if (context._d > 0)\n        context._d--;\n    if (context._d === 0) {\n        context.isSettled = true;\n        node.emit('settled', true, false);\n        if (node.parent)\n            (_a = node.parent) === null || _a === void 0 ? void 0 : _a.calm({ name: node.name, value: context.value });\n        if (context._resolve)\n            context._resolve(context.value);\n    }\n}\n/**\n * This node is being removed and needs to be cleaned up.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction destroy(node, context) {\n    node.emit('destroying', node);\n    // flush all messages out\n    node.store.filter(() => false);\n    if (node.parent) {\n        node.parent.emit('childRemoved', node);\n        node.parent.remove(node);\n    }\n    deregister(node);\n    node.emit('destroyed', node);\n    context._e.flush();\n    context._value = context.value = undefined;\n    for (const property in context.context) {\n        delete context.context[property];\n    }\n    context.plugins.clear();\n    context.context = null; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n}\n/**\n * Defines the current input type concretely.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param definition - A {@link FormKitTypeDefinition | FormKitTypeDefinition}\n *\n * @internal\n */\nfunction define(node, context, definition) {\n    // Assign the type\n    context.type = definition.type;\n    // Assign the definition\n    context.props.definition = clone(definition);\n    // Ensure the type is seeded with the `__init` value.\n    context.value = context._value = createValue({\n        type: node.type,\n        value: context.value,\n    });\n    /**\n     * If the user has a typename defined, use it here.\n     */\n    if (definition.forceTypeProp) {\n        if (node.props.type)\n            node.props.originalType = node.props.type;\n        context.props.type = definition.forceTypeProp;\n    }\n    /**\n     * If the input is part of a family of inputs, add that prop.\n     */\n    if (definition.family) {\n        context.props.family = definition.family;\n    }\n    // Apply any input features before resetting the props.\n    if (definition.features) {\n        definition.features.forEach((feature) => feature(node));\n    }\n    // Its possible that input-defined \"props\" have ended up in the context attrs\n    // these should be moved back out of the attrs object.\n    if (definition.props) {\n        node.addProps(definition.props);\n    }\n    node.emit('defined', definition);\n}\n/**\n * Adds props to a given node by stripping them out of the node.props.attrs and\n * then adding them to the nodes.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param props - An array of prop strings (in camelCase!)\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction addProps(node, context, props) {\n    var _a;\n    if (node.props.attrs) {\n        const attrs = { ...node.props.attrs };\n        // Temporarily disable prop emits\n        node.props._emit = false;\n        for (const attr in attrs) {\n            const camelName = camel(attr);\n            if (props.includes(camelName)) {\n                node.props[camelName] = attrs[attr];\n                delete attrs[attr];\n            }\n        }\n        const initial = cloneAny(context._value);\n        node.props.initial =\n            node.type !== 'input' ? init(initial) : initial;\n        // Re-enable prop emits\n        node.props._emit = true;\n        node.props.attrs = attrs;\n        if (node.props.definition) {\n            node.props.definition.props = [\n                ...(((_a = node.props.definition) === null || _a === void 0 ? void 0 : _a.props) || []),\n                ...props,\n            ];\n        }\n    }\n    node.emit('added-props', props);\n    return node;\n}\n/**\n * Adds a child to the node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A parent {@link FormKitContext | FormKitContext}\n * @param child - A {@link FormKitNode | FormKitNode}\n * @param listIndex - A index number to be added at\n *\n * @internal\n */\nfunction addChild(parent, parentContext, child, listIndex) {\n    if (parent.type === 'input')\n        error(100, parent);\n    if (child.parent && child.parent !== parent) {\n        child.parent.remove(child);\n    }\n    // Synchronously set the initial value on the parent\n    if (!parentContext.children.includes(child)) {\n        if (listIndex !== undefined && parent.type === 'list') {\n            // Inject the child:\n            const existingNode = parentContext.children[listIndex];\n            if (existingNode && '__FKP' in existingNode) {\n                // The node index is populated by a placeholderNode so we need to\n                // remove that replace it with the real node (the current child).\n                child._c.uid = existingNode.uid;\n                parentContext.children.splice(listIndex, 1, child);\n            }\n            else {\n                parentContext.children.splice(listIndex, 0, child);\n            }\n            if (Array.isArray(parent.value) &&\n                parent.value.length < parentContext.children.length) {\n                // When adding an node or value to a list it is absolutely critical to\n                // know if, at the moment of injection, the parent’s value or the node\n                // children are the source of truth. For example, if a user pushes or\n                // splices a new value onto the lists’s array then we want to use that\n                // value as the value of the new node, but if a user adds a node to the\n                // list then we want the node’s value. In this specific case, we\n                // assume (due to length) that a new node was injected into the list, so\n                // we want that new node’s value injected into the parent list value.\n                parent.disturb().calm({\n                    name: listIndex,\n                    value: child.value,\n                    from: valueInserted,\n                });\n            }\n        }\n        else {\n            parentContext.children.push(child);\n        }\n        if (!child.isSettled)\n            parent.disturb();\n    }\n    if (child.parent !== parent) {\n        child.parent = parent;\n        // In this edge case middleware changed the parent assignment so we need to\n        // re-add the child\n        if (child.parent !== parent) {\n            parent.remove(child);\n            child.parent.add(child);\n            return parent;\n        }\n    }\n    else {\n        // When a parent is properly assigned, we inject the parent's plugins on the\n        // child.\n        child.use(parent.plugins);\n    }\n    // Finally we call commit here, which sub-calls hydrate(), hydrate() will\n    // resolve any conflict between the parent and child values, and also ensure\n    // proper \"placeholders\" are made on the parent.\n    commit(parent, parentContext, false);\n    parent.ledger.merge(child);\n    parent.emit('child', child);\n    return parent;\n}\n/**\n * The setter for node.parent = FormKitNode\n * @param child - A child {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param _property - A property to be setted\n * @param parent - A parent {@link FormKitNode | FormKitNode}\n *\n * @returns `boolean`\n *\n * @internal\n */\nfunction setParent(child, context, _property, parent) {\n    if (isNode(parent)) {\n        if (child.parent && child.parent !== parent) {\n            child.parent.remove(child);\n        }\n        context.parent = parent;\n        child.resetConfig();\n        !parent.children.includes(child)\n            ? parent.add(child)\n            : child.use(parent.plugins);\n        return true;\n    }\n    if (parent === null) {\n        context.parent = null;\n        return true;\n    }\n    return false;\n}\n/**\n * Removes a child from the node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param child - A child {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction removeChild(node, context, child) {\n    const childIndex = context.children.indexOf(child);\n    if (childIndex !== -1) {\n        if (child.isSettled)\n            node.disturb();\n        context.children.splice(childIndex, 1);\n        // If an ancestor uses the preserve prop, then we are expected to not remove\n        // our values on this node either, see #53\n        let preserve = undefine(child.props.preserve);\n        let parent = child.parent;\n        while (preserve === undefined && parent) {\n            preserve = undefine(parent.props.preserve);\n            parent = parent.parent;\n        }\n        if (!preserve) {\n            node.calm({\n                name: node.type === 'list' ? childIndex : child.name,\n                value: valueRemoved,\n            });\n        }\n        else {\n            node.calm();\n        }\n        child.parent = null;\n        // Remove the child from the config. Is this weird? Yes. Is it ok? Yes.\n        child.config._rmn = child;\n    }\n    node.ledger.unmerge(child);\n    return node;\n}\n/**\n * Iterate over each immediate child and perform a callback.\n *\n * @param _node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param callback - A {@link FormKitChildCallback | FormKitChildCallback}\n *\n * @internal\n */\nfunction eachChild(_node, context, callback) {\n    context.children.forEach((child) => !('__FKP' in child) && callback(child));\n}\n/**\n * Walk all nodes below this one and execute a callback.\n *\n * @param _node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param callback - A {@link FormKitChildCallback | FormKitChildCallback}\n * @param stopIfFalse - Boolean to stop running on children\n * @param skipSubtreeOnFalse - Boolean that when true prevents recursion into a deeper node when the callback returns false\n *\n * @internal\n */\nfunction walkTree(_node, context, callback, stopIfFalse = false, skipSubtreeOnFalse = false) {\n    context.children.some((child) => {\n        if ('__FKP' in child)\n            return false;\n        const val = callback(child);\n        // return true to stop the walk early\n        if (stopIfFalse && val === false)\n            return true;\n        if (skipSubtreeOnFalse && val === false)\n            return false;\n        return child.walk(callback, stopIfFalse, skipSubtreeOnFalse);\n    });\n}\n/**\n * Set the configuration options of the node and it's subtree.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction resetConfig(node, context) {\n    const parent = node.parent || undefined;\n    context.config = createConfig(node.config._t, parent);\n    node.walk((n) => n.resetConfig());\n}\n/**\n * Adds a plugin to the node, its children, and executes it.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param plugin -\n * {@link FormKitPlugin | FormKitPlugin}\n * {@link FormKitPlugin | FormKitPlugin[]}\n * {@link FormKitPlugin | Set<FormKitPlugin>}\n * @param run - If it will run on creation\n * @param library - If it will run on library creation\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction use(node, context, plugin, run = true, library = true) {\n    if (Array.isArray(plugin) || plugin instanceof Set) {\n        plugin.forEach((p) => use(node, context, p));\n        return node;\n    }\n    if (!context.plugins.has(plugin)) {\n        if (library && typeof plugin.library === 'function')\n            plugin.library(node);\n        // When plugins return false, they are never added as to the plugins Set\n        // meaning they only ever have access to the single node they were added on.\n        if (run && plugin(node) !== false) {\n            context.plugins.add(plugin);\n            node.children.forEach((child) => child.use(plugin));\n        }\n    }\n    return node;\n}\n/**\n * Moves a node in the parent’s children to the given index.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param _property - A property to add\n * @param setIndex - The index to move the node\n *\n * @internal\n */\nfunction setIndex(node, _context, _property, setIndex) {\n    if (isNode(node.parent)) {\n        const children = node.parent.children;\n        const index = setIndex >= children.length\n            ? children.length - 1\n            : setIndex < 0\n                ? 0\n                : setIndex;\n        const oldIndex = children.indexOf(node);\n        if (oldIndex === -1)\n            return false;\n        children.splice(oldIndex, 1);\n        children.splice(index, 0, node);\n        node.parent.children = children;\n        if (node.parent.type === 'list')\n            node.parent\n                .disturb()\n                .calm({ name: index, value: valueMoved, from: oldIndex });\n        return true;\n    }\n    return false;\n}\n/**\n * Retrieves the index of a node from the parent’s children.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction getIndex(node) {\n    if (node.parent) {\n        const index = [...node.parent.children].indexOf(node);\n        // If the index is currently -1 then the node isnt finished booting, so it\n        // must be the next node.\n        return index === -1 ? node.parent.children.length : index;\n    }\n    return -1;\n}\n/**\n * Retrieves the context object of a given node. This is intended to be a\n * private trap and should absolutely not be used in plugins or user-land code.\n *\n * @param _node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction getContext(_node, context) {\n    return context;\n}\n/**\n * Get the name of the current node, allowing for slight mutations.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction getName(node, context) {\n    var _a;\n    if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === 'list')\n        return node.index;\n    return context.name !== useIndex ? context.name : node.index;\n}\n/**\n * Returns the address of the current node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction getAddress(node, context) {\n    return context.parent\n        ? context.parent.address.concat([node.name])\n        : [node.name];\n}\n/**\n * Fetches a node from the tree by its address.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param locator - A string or {@link FormKitAddress | FormKitAddress} to find in the tree.\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction getNode(node, _context, locator) {\n    const address = typeof locator === 'string' ? locator.split(node.config.delimiter) : locator;\n    if (!address.length)\n        return undefined;\n    const first = address[0];\n    let pointer = node.parent;\n    if (!pointer) {\n        // This address names the root node, remove it to get child name:\n        if (String(address[0]) === String(node.name))\n            address.shift();\n        // All root nodes start at themselves ultimately:\n        pointer = node;\n    }\n    // Any addresses starting with $parent should discard it\n    if (first === '$parent')\n        address.shift();\n    while (pointer && address.length) {\n        const name = address.shift();\n        switch (name) {\n            case '$root':\n                pointer = node.root;\n                break;\n            case '$parent':\n                pointer = pointer.parent;\n                break;\n            case '$self':\n                pointer = node;\n                break;\n            default:\n                pointer =\n                    pointer.children.find((c) => !('__FKP' in c) && String(c.name) === String(name)) || select(pointer, name);\n        }\n    }\n    return pointer || undefined;\n}\n/**\n * Perform selections on a subtree using the address \"selector\" methods.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param selector - A `string | number` to find in the node\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`\n *\n * @internal\n */\nfunction select(node, selector) {\n    const matches = String(selector).match(/^(find)\\((.*)\\)$/);\n    if (matches) {\n        const [, action, argStr] = matches;\n        const args = argStr.split(',').map((arg) => arg.trim());\n        switch (action) {\n            case 'find':\n                return node.find(args[0], args[1]);\n            default:\n                return undefined;\n        }\n    }\n    return undefined;\n}\n/**\n * Perform a breadth first search and return the first instance of a node that\n * is found in the subtree or undefined.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param searchTerm - The term we are searching for\n * @param searcher - Either a key of {@link FormKitNode | FormKitNode}, or a {@link FormKitSearchFunction | FormKitSearchFunction}\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`\n *\n * @internal\n */\nfunction find(node, _context, searchTerm, searcher) {\n    return bfs(node, searchTerm, searcher);\n}\n/**\n * Perform a breadth-first search on a node subtree and locate the first\n * instance of a match.\n *\n * @param tree - A {@link FormKitNode | FormKitNode} to start from.\n * @param searchValue - A value to be searched.\n * @param searchGoal - A goal value.\n *\n * @returns A {@link FormKitNode | FormKitNode } or `undefined`.\n *\n * @public\n */\nfunction bfs(tree, searchValue, searchGoal = 'name') {\n    const search = typeof searchGoal === 'string'\n        ? (n) => n[searchGoal] == searchValue // non-strict comparison is intentional\n        : searchGoal;\n    const stack = [tree];\n    while (stack.length) {\n        const node = stack.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        if ('__FKP' in node)\n            continue;\n        if (search(node, searchValue))\n            return node;\n        stack.push(...node.children);\n    }\n    return undefined;\n}\n/**\n * Get the root node of the tree.\n *\n * @param n - A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction getRoot(n) {\n    let node = n;\n    while (node.parent) {\n        node = node.parent;\n    }\n    return node;\n}\n/**\n * Creates a new configuration option.\n *\n * @param target - An object of optional properties of {@link FormKitConfig | FormKitConfig}\n * @param parent - A parent {@link FormKitNode | FormKitNode}\n *\n * @returns {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction createConfig(target = {}, parent) {\n    let node = undefined;\n    return new Proxy(target, {\n        get(...args) {\n            const prop = args[1];\n            if (prop === '_t')\n                return target;\n            const localValue = Reflect.get(...args);\n            // Check our local values first\n            if (localValue !== undefined)\n                return localValue;\n            // Then check our parent values next\n            if (parent) {\n                const parentVal = parent.config[prop];\n                if (parentVal !== undefined)\n                    return parentVal;\n            }\n            if (target.rootConfig && typeof prop === 'string') {\n                const rootValue = target.rootConfig[prop];\n                if (rootValue !== undefined)\n                    return rootValue;\n            }\n            // The default delay value should be 20\n            if (prop === 'delay' && (node === null || node === void 0 ? void 0 : node.type) === 'input')\n                return 20;\n            // Finally check the default values\n            return defaultConfig[prop];\n        },\n        set(...args) {\n            const prop = args[1];\n            const value = args[2];\n            if (prop === '_n') {\n                node = value;\n                if (target.rootConfig)\n                    target.rootConfig._add(node);\n                return true;\n            }\n            if (prop === '_rmn') {\n                if (target.rootConfig)\n                    target.rootConfig._rm(node);\n                node = undefined;\n                return true;\n            }\n            if (!eq(target[prop], value, false)) {\n                const didSet = Reflect.set(...args);\n                if (node) {\n                    node.emit(`config:${prop}`, value, false);\n                    configChange(node, prop, value);\n                    // Walk the node tree and notify of config/prop changes where relevant\n                    node.walk((n) => configChange(n, prop, value), false, true);\n                }\n                return didSet;\n            }\n            return true;\n        },\n    });\n}\n/**\n * Given a string of text, expose it for modification, translation, or full\n * replacement.\n\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param key - A {@link FormKitTextFragment | FormKitTextFragment}, or generic string of text\n * @param type - A string to represent the text type\n *\n * @returns `string`\n *\n * @internal\n */\nfunction text(node, _context, key, type = 'ui') {\n    const fragment = typeof key === 'string' ? { key, value: key, type } : key;\n    const value = node.hook.text.dispatch(fragment);\n    node.emit('text', value, false);\n    return value.value;\n}\n/**\n * Submits the nearest ancestor that is a FormKit \"form\". It determines which\n * node is a form by locating an ancestor where node.props.isForm = true.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction submit(node) {\n    const name = node.name;\n    do {\n        if (node.props.isForm === true)\n            break;\n        if (!node.parent)\n            error(106, name);\n        node = node.parent;\n    } while (node);\n    if (node.props.id) {\n        submitForm(node.props.id);\n    }\n}\n/**\n * Reset to the original value.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param value - The value to reset to\n *\n * @internal\n */\nfunction resetValue(node, _context, value) {\n    return reset(node, value);\n}\n/**\n * Sets errors on the node and optionally its children.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param localErrors - An array of {@link ErrorMessages | ErrorMessages} to set on this node\n * @param childErrors - An object of name of {@link ErrorMessages | ErrorMessages} to set on children.\n *\n * @internal\n */\nfunction setErrors$1(node, _context, localErrors, childErrors) {\n    const sourceKey = `${node.name}-set`;\n    const errors = node.hook.setErrors.dispatch({ localErrors, childErrors });\n    createMessages(node, errors.localErrors, errors.childErrors).forEach((errors) => {\n        node.store.apply(errors, (message) => message.meta.source === sourceKey);\n    });\n    return node;\n}\n/**\n * Clears errors on the node and optionally its children.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param clearChildErrors - A boolean to clear children error or not.\n * @param sourceKey - The source key string to reset.\n *\n * @internal\n */\nfunction clearErrors$1(node, context, clearChildErrors = true, sourceKey) {\n    setErrors$1(node, context, []);\n    if (clearChildErrors) {\n        sourceKey = sourceKey || `${node.name}-set`;\n        node.walk((child) => {\n            child.store.filter((message) => {\n                return !(message.type === 'error' &&\n                    message.meta &&\n                    message.meta.source === sourceKey);\n            });\n        });\n    }\n    return node;\n}\n/**\n * Middleware to assign default prop values as issued by core.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction defaultProps(node) {\n    if (!has(node.props, 'id'))\n        node.props.id = `input_${idCount++}`;\n    return node;\n}\n/**\n * Create props based on initial values\n *\n * @param initial - An initial value to be transformed\n *\n * @internal\n */\nfunction createProps(initial) {\n    const props = {\n        initial: typeof initial === 'object' ? cloneAny(initial) : initial,\n    };\n    let node;\n    let isEmitting = true;\n    return new Proxy(props, {\n        get(...args) {\n            const [_t, prop] = args;\n            if (has(props, prop))\n                return Reflect.get(...args);\n            if (node && typeof prop === 'string' && node.config[prop] !== undefined)\n                return node.config[prop];\n            return undefined;\n        },\n        set(target, property, originalValue, receiver) {\n            if (property === '_n') {\n                node = originalValue;\n                return true;\n            }\n            if (property === '_emit') {\n                isEmitting = originalValue;\n                return true;\n            }\n            const { prop, value } = node.hook.prop.dispatch({\n                prop: property,\n                value: originalValue,\n            });\n            // Typescript compiler cannot handle a symbol index, even though js can:\n            if (!eq(props[prop], value, false) ||\n                typeof value === 'object') {\n                const didSet = Reflect.set(target, prop, value, receiver);\n                if (isEmitting) {\n                    node.emit('prop', { prop, value });\n                    if (typeof prop === 'string')\n                        node.emit(`prop:${prop}`, value);\n                }\n                return didSet;\n            }\n            return true;\n        },\n    });\n}\n/**\n * Applies a new trap to the FormKitNode allowing plugins to extend the\n * base functionality of a FormKitNode.\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param property - A string of the property name\n * @param trap - A {@link FormKitTrap | FormKitTrap}\n * @returns\n */\nfunction extend(node, context, property, trap) {\n    context.traps.set(property, trap);\n    return node;\n}\n/**\n * A cheap function that iterates over all plugins and stops once node.define\n * is called.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param plugins - An array of {@link FormKitPlugin | FormKitPlugin}\n *\n * @internal\n */\nfunction findDefinition(node, plugins) {\n    // If the definition is already there, force call to define.\n    if (node.props.definition)\n        return node.define(node.props.definition);\n    for (const plugin of plugins) {\n        if (node.props.definition)\n            return;\n        if (typeof plugin.library === 'function') {\n            plugin.library(node);\n        }\n    }\n}\n/**\n * Create a new context object for our a FormKit node, given default information\n *\n * @param options - An options object of {@link FormKitOptions | FormKitOptions} to override the defaults.\n *\n * @returns A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction createContext(options) {\n    const value = createValue(options);\n    const config = createConfig(options.config || {}, options.parent);\n    return {\n        _d: 0,\n        _e: createEmitter(),\n        uid: Symbol(),\n        _resolve: false,\n        _tmo: false,\n        _value: value,\n        children: dedupe(options.children || []),\n        config,\n        hook: createHooks(),\n        isCreated: false,\n        isSettled: true,\n        ledger: createLedger(),\n        name: createName(options),\n        parent: options.parent || null,\n        plugins: new Set(),\n        props: createProps(value),\n        settled: Promise.resolve(value),\n        store: createStore(true),\n        sync: options.sync || false,\n        traps: createTraps(),\n        type: options.type || 'input',\n        value,\n    };\n}\n/**\n * Initialize a node object's internal properties.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param options - An options object of {@link FormKitOptions | FormKitOptions} to override the defaults.\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction nodeInit(node, options) {\n    var _a;\n    // Set the internal node on the props, config, ledger and store\n    node.ledger.init((node.store._n = node.props._n = node.config._n = node));\n    // Apply given in options to the node.\n    node.props._emit = false;\n    if (options.props)\n        Object.assign(node.props, options.props);\n    node.props._emit = true;\n    // Attempt to find a definition from the pre-existing plugins.\n    findDefinition(node, new Set([\n        ...(options.plugins || []),\n        ...(node.parent ? node.parent.plugins : []),\n    ]));\n    // Then we apply each plugin's root code, we do this with an explicit loop\n    // for that ity-bitty performance bump.\n    if (options.plugins) {\n        for (const plugin of options.plugins) {\n            use(node, node._c, plugin, true, false);\n        }\n    }\n    // Initialize the default props\n    defaultProps(node);\n    // Apply the parent to each child.\n    node.each((child) => node.add(child));\n    // If the node has a parent, ensure it's properly nested bi-directionally.\n    if (node.parent)\n        node.parent.add(node, options.index);\n    // Inputs are leafs, and cannot have children\n    if (node.type === 'input' && node.children.length)\n        error(100, node);\n    // Apply the input hook to the initial value.\n    input(node, node._c, node._value, false);\n    // Release the store buffer\n    node.store.release();\n    // Register the node globally if someone explicitly gave it an id\n    if ((_a = options.props) === null || _a === void 0 ? void 0 : _a.id)\n        register(node);\n    // Our node is finally ready, emit it to the world\n    node.emit('created', node);\n    node.isCreated = true;\n    return node;\n}\n/**\n * Creates a placeholder node that can be used to hold a place in a the children\n * array until the actual node is created.\n * @param options - FormKitOptions\n * @internal\n */\nfunction createPlaceholder(options) {\n    var _a, _b, _f, _g;\n    return {\n        __FKP: true,\n        uid: Symbol(),\n        name: (_a = options === null || options === void 0 ? void 0 : options.name) !== null && _a !== void 0 ? _a : `p_${nameCount++}`,\n        value: (_b = options === null || options === void 0 ? void 0 : options.value) !== null && _b !== void 0 ? _b : null,\n        _value: (_f = options === null || options === void 0 ? void 0 : options.value) !== null && _f !== void 0 ? _f : null,\n        type: (_g = options === null || options === void 0 ? void 0 : options.type) !== null && _g !== void 0 ? _g : 'input',\n        use: () => {\n            // noop\n        },\n        input(value) {\n            this._value = value;\n            this.value = value;\n            return Promise.resolve();\n        },\n        isSettled: true,\n    };\n}\n/**\n * Determines if a node is a placeholder node.\n * @param node - A {@link FormKitNode | FormKitNode}\n * @returns\n * @public\n */\nfunction isPlaceholder(node) {\n    return '__FKP' in node;\n}\n/**\n * Creates a new instance of a FormKit Node. Nodes are the atomic unit of a FormKit graph.\n *\n * @example\n *\n * ```javascript\n * import { createNode } from '@formkit/core'\n *\n * const input = createNode({\n *   type: 'input', // defaults to 'input' if not specified\n *   value: 'hello node world',\n * })\n *\n * console.log(input.value)\n * // 'hello node world'\n * ```\n *\n * @param options - An options object of {@link FormKitOptions | FormKitOptions} to override the defaults.\n *\n * @returns A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction createNode(options) {\n    const ops = options || {};\n    const context = createContext(ops);\n    // Note: The typing for the proxy object cannot be fully modeled, thus we are\n    // force-typing to a FormKitNode. See:\n    // https://github.com/microsoft/TypeScript/issues/28067\n    const node = new Proxy(context, {\n        get(...args) {\n            const [, property] = args;\n            if (property === '__FKNode__')\n                return true;\n            const trap = context.traps.get(property);\n            if (trap && trap.get)\n                return trap.get(node, context);\n            return Reflect.get(...args);\n        },\n        set(...args) {\n            const [, property, value] = args;\n            const trap = context.traps.get(property);\n            if (trap && trap.set)\n                return trap.set(node, context, property, value);\n            return Reflect.set(...args);\n        },\n    });\n    return nodeInit(node, ops);\n}\n\n/**\n * Type narrow that a node is a DOM node.\n *\n * @param node - A schema node to check\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isDOM(node) {\n    return typeof node !== 'string' && has(node, '$el');\n}\n/**\n * Type narrow that a node is a DOM node.\n *\n * @param node - A schema node to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isComponent(node) {\n    return typeof node !== 'string' && has(node, '$cmp');\n}\n/**\n * Root declaration.\n *\n * @param node - An object to check.\n */\nfunction isConditional(node) {\n    if (!node || typeof node === 'string')\n        return false;\n    return has(node, 'if') && has(node, 'then');\n}\n/**\n * Determines if the node is syntactic sugar or not.\n *\n * @param node - A schema node to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSugar(node) {\n    return typeof node !== 'string' && '$formkit' in node;\n}\n/**\n * Converts syntactic sugar nodes to standard nodes.\n *\n * @param node - A node to covert.\n *\n * @returns A {@link FormKitSchemaNode | FormKitSchemaNode} without the properties of {@link FormKitSchemaFormKit | FormKitSchemaFormKit}.\n *\n * @public\n */\nfunction sugar(node) {\n    if (typeof node === 'string') {\n        return {\n            $el: 'text',\n            children: node,\n        };\n    }\n    if (isSugar(node)) {\n        const { $formkit: type, for: iterator, if: condition, children, bind, ...props } = node;\n        return Object.assign({\n            $cmp: 'FormKit',\n            props: { ...props, type },\n        }, condition ? { if: condition } : {}, iterator ? { for: iterator } : {}, children ? { children } : {}, bind ? { bind } : {});\n    }\n    return node;\n}\n\n/**\n * Compiles a logical string like `\"a != z || b == c\"` into a single function.\n * The return value is an object with a \"provide\" method that iterates over all\n * requirement tokens to use as replacements.\n *\n * @example\n *\n * ```typescript\n * let name = {\n *   value: 'jon'\n * }\n * const condition = compile(\"$name == 'bob'\").provide((token) => {\n *  return () => name.value // must return a function!\n * })\n *\n * condition() // false\n * ```\n *\n * @param expr - A string to compile.\n *\n * @returns A {@link FormKitCompilerOutput | FormKitCompilerOutput}.\n *\n * @public\n */\nfunction compile(expr) {\n    /**\n     * These tokens are replacements used in evaluating a given condition.\n     */\n    // const tokens: FormKitTokens = {}\n    /**\n     * The value of the provide() callback. Used for late binding.\n     */\n    let provideTokens;\n    /**\n     * These are token requirements like \"$name.value\" that are need to fulfill\n     * a given condition call.\n     */\n    const requirements = new Set();\n    /**\n     * Expands the current value if it is a function.\n     * @param operand - A left or right hand operand\n     * @returns\n     */\n    const x = function expand(operand, tokens) {\n        return typeof operand === 'function' ? operand(tokens) : operand;\n    };\n    /**\n     * Comprehensive list of operators. This list MUST be\n     * ordered by the length of the operator characters in descending order.\n     */\n    const operatorRegistry = [\n        {\n            '&&': (l, r, t) => x(l, t) && x(r, t),\n            '||': (l, r, t) => x(l, t) || x(r, t),\n        },\n        {\n            '===': (l, r, t) => !!(x(l, t) === x(r, t)),\n            '!==': (l, r, t) => !!(x(l, t) !== x(r, t)),\n            '==': (l, r, t) => !!(x(l, t) == x(r, t)),\n            '!=': (l, r, t) => !!(x(l, t) != x(r, t)),\n            '>=': (l, r, t) => !!(x(l, t) >= x(r, t)),\n            '<=': (l, r, t) => !!(x(l, t) <= x(r, t)),\n            '>': (l, r, t) => !!(x(l, t) > x(r, t)),\n            '<': (l, r, t) => !!(x(l, t) < x(r, t)),\n        },\n        {\n            '+': (l, r, t) => x(l, t) + x(r, t),\n            '-': (l, r, t) => x(l, t) - x(r, t),\n        },\n        {\n            '*': (l, r, t) => x(l, t) * x(r, t),\n            '/': (l, r, t) => x(l, t) / x(r, t),\n            '%': (l, r, t) => x(l, t) % x(r, t),\n        },\n    ];\n    /**\n     * A full list of all operator symbols.\n     */\n    const operatorSymbols = operatorRegistry.reduce((s, g) => {\n        return s.concat(Object.keys(g));\n    }, []);\n    /**\n     * An array of the first character of each operator.\n     */\n    const operatorChars = new Set(operatorSymbols.map((key) => key.charAt(0)));\n    /**\n     * Determines if the current character is the start of an operator symbol, if it\n     * is, it returns that symbol.\n     * @param symbols - An array of symbols that are considered operators\n     * @param char - The current character being operated on\n     * @param p - The position of the pointer\n     * @param expression - The full string expression\n     * @returns\n     */\n    function getOp(symbols, char, p, expression) {\n        const candidates = symbols.filter((s) => s.startsWith(char));\n        if (!candidates.length)\n            return false;\n        return candidates.find((symbol) => {\n            if (expression.length >= p + symbol.length) {\n                const nextChars = expression.substring(p, p + symbol.length);\n                if (nextChars === symbol)\n                    return symbol;\n            }\n            return false;\n        });\n    }\n    /**\n     * Determines the step number of the right or left hand operator.\n     * @param p - The position of the pointer\n     * @param expression - The full string expression\n     * @param direction - 1 = right, 0 = left\n     */\n    function getStep(p, expression, direction = 1) {\n        let next = direction\n            ? expression.substring(p + 1).trim()\n            : expression.substring(0, p).trim();\n        if (!next.length)\n            return -1;\n        if (!direction) {\n            // left hand direction could include a function name we need to remove\n            const reversed = next.split('').reverse();\n            const start = reversed.findIndex((char) => operatorChars.has(char));\n            next = reversed.slice(start).join('');\n        }\n        const char = next[0];\n        return operatorRegistry.findIndex((operators) => {\n            const symbols = Object.keys(operators);\n            return !!getOp(symbols, char, 0, next);\n        });\n    }\n    /**\n     * Extracts a tail call. For example:\n     * ```\n     * $foo().bar(baz) + 7\n     * ```\n     * Would extract \"bar(baz)\" and return p of 15 (after the (baz)).\n     *\n     * @param p - The position of a closing parenthetical.\n     * @param expression - The full expression being parsed.\n     */\n    function getTail(pos, expression) {\n        let tail = '';\n        const length = expression.length;\n        let depth = 0;\n        for (let p = pos; p < length; p++) {\n            const char = expression.charAt(p);\n            if (char === '(') {\n                depth++;\n            }\n            else if (char === ')') {\n                depth--;\n            }\n            else if (depth === 0 && char === ' ') {\n                continue;\n            }\n            if (depth === 0 && getOp(operatorSymbols, char, p, expression)) {\n                return [tail, p - 1];\n            }\n            else {\n                tail += char;\n            }\n        }\n        return [tail, expression.length - 1];\n    }\n    /**\n     * Parse a string expression into a function that returns a boolean. This is\n     * the magic behind schema logic like $if.\n     * @param expression - A string expression to parse\n     * @returns\n     */\n    function parseLogicals(expression, step = 0) {\n        const operators = operatorRegistry[step];\n        const length = expression.length;\n        const symbols = Object.keys(operators);\n        let depth = 0;\n        let quote = false;\n        let op = null;\n        let operand = '';\n        let left = null;\n        let operation;\n        let lastChar = '';\n        let char = '';\n        let parenthetical = '';\n        let parenQuote = '';\n        let startP = 0;\n        const addTo = (depth, char) => {\n            depth ? (parenthetical += char) : (operand += char);\n        };\n        for (let p = 0; p < length; p++) {\n            lastChar = char;\n            char = expression.charAt(p);\n            if ((char === \"'\" || char === '\"') &&\n                lastChar !== '\\\\' &&\n                ((depth === 0 && !quote) || (depth && !parenQuote))) {\n                if (depth) {\n                    parenQuote = char;\n                }\n                else {\n                    quote = char;\n                }\n                addTo(depth, char);\n                continue;\n            }\n            else if ((quote && (char !== quote || lastChar === '\\\\')) ||\n                (parenQuote && (char !== parenQuote || lastChar === '\\\\'))) {\n                addTo(depth, char);\n                continue;\n            }\n            else if (quote === char) {\n                quote = false;\n                addTo(depth, char);\n                continue;\n            }\n            else if (parenQuote === char) {\n                parenQuote = false;\n                addTo(depth, char);\n                continue;\n            }\n            else if (char === ' ') {\n                continue;\n            }\n            else if (char === '(') {\n                if (depth === 0) {\n                    startP = p;\n                }\n                else {\n                    parenthetical += char;\n                }\n                depth++;\n            }\n            else if (char === ')') {\n                depth--;\n                if (depth === 0) {\n                    // Parenthetical statements cannot be grouped up in the implicit order\n                    // of left/right statements based on which step they are on because\n                    // they are parsed on every step and then must be applied to the\n                    // operator. Example:\n                    //\n                    // 5 + (3) * 2\n                    //\n                    // This should yield 11 not 16. This order is normally implicit in the\n                    // sequence of operators being parsed, but with parenthesis the parse\n                    // happens each time. Instead we need to know if the resulting value\n                    // should be applied to the left or the right hand operator. The\n                    // general algorithm is:\n                    //\n                    // 1. Does this paren have an operator on the left or right side\n                    // 2. If not, it's unnecessarily wrapped (3 + 2)\n                    // 3. If it does, then which order of operation is highest?\n                    // 4. Wait for the highest order of operation to bind to an operator.\n                    // If the parenthetical has a preceding token like $fn(1 + 2) then we\n                    // need to subtract the existing operand length from the start\n                    // to determine if this is a left or right operation\n                    const fn = typeof operand === 'string' && operand.startsWith('$')\n                        ? operand\n                        : undefined;\n                    const hasTail = fn && expression.charAt(p + 1) === '.';\n                    // It's possible the function has a chained tail call:\n                    let tail = '';\n                    if (hasTail) {\n                        [tail, p] = getTail(p + 2, expression);\n                    }\n                    const lStep = op ? step : getStep(startP, expression, 0);\n                    const rStep = getStep(p, expression);\n                    if (lStep === -1 && rStep === -1) {\n                        // This parenthetical was unnecessarily wrapped at the root, or\n                        // these are args of a function call.\n                        operand = evaluate(parenthetical, -1, fn, tail);\n                    }\n                    else if (op && (lStep >= rStep || rStep === -1) && step === lStep) {\n                        // has a left hand operator with a higher order of operation\n                        left = op.bind(null, evaluate(parenthetical, -1, fn, tail));\n                        op = null;\n                        operand = '';\n                    }\n                    else if (rStep > lStep && step === rStep) {\n                        // should be applied to the right hand operator when it gets one\n                        operand = evaluate(parenthetical, -1, fn, tail);\n                    }\n                    else {\n                        operand += `(${parenthetical})${hasTail ? `.${tail}` : ''}`;\n                    }\n                    parenthetical = '';\n                }\n                else {\n                    parenthetical += char;\n                }\n            }\n            else if (depth === 0 &&\n                (operation = getOp(symbols, char, p, expression))) {\n                if (p === 0) {\n                    error(103, [operation, expression]);\n                }\n                // We identified the operator by looking ahead in the string, so we need\n                // our position to move past the operator\n                p += operation.length - 1;\n                if (p === expression.length - 1) {\n                    error(104, [operation, expression]);\n                }\n                if (!op) {\n                    // Bind the left hand operand\n                    if (left) {\n                        // In this case we've already parsed the left hand operator\n                        op = operators[operation].bind(null, evaluate(left, step));\n                        left = null;\n                    }\n                    else {\n                        op = operators[operation].bind(null, evaluate(operand, step));\n                        operand = '';\n                    }\n                }\n                else if (operand) {\n                    // Bind the right hand operand, and return the resulting expression as a new left hand operator\n                    left = op.bind(null, evaluate(operand, step));\n                    op = operators[operation].bind(null, left);\n                    operand = '';\n                }\n                continue;\n            }\n            else {\n                addTo(depth, char);\n            }\n        }\n        if (operand && op) {\n            // If we were left with an operand after the loop, and an op, it should\n            // be the right hand assignment.\n            op = op.bind(null, evaluate(operand, step));\n        }\n        // If we don't have an op, but we do have a left hand assignment, then that\n        // is actually our operator, so just re-assign it to op\n        op = !op && left ? left : op;\n        if (!op && operand) {\n            // If we don't have any op but we do have an operand so there is no boolean\n            // logic to perform, but that operand still means something so we need to\n            // evaluate it and return it as a function\n            op = (v, t) => {\n                return typeof v === 'function' ? v(t) : v;\n            };\n            op = op.bind(null, evaluate(operand, step));\n        }\n        if (!op && !operand) {\n            error(105, expression);\n        }\n        return op;\n    }\n    /**\n     * Given a string like '$name==bobby' evaluate it to true or false\n     * @param operand - A left or right boolean operand — usually conditions\n     * @param step - The current order of operation\n     * @param fnToken - The token (string) representation of a function being called\n     * @returns\n     */\n    function evaluate(operand, step, fnToken, tail //eslint-disable-line\n    ) {\n        if (fnToken) {\n            const fn = evaluate(fnToken, operatorRegistry.length);\n            let userFuncReturn;\n            // \"Tail calls\" are dot accessors after a function $foo().value. We need\n            // to compile tail calls, and then provide the function result to the\n            // exposed tokens.\n            let tailCall = tail\n                ? compile(`$${tail}`)\n                : false;\n            if (typeof fn === 'function') {\n                const args = parseArgs(String(operand)).map((arg) => evaluate(arg, -1));\n                return (tokens) => {\n                    const userFunc = fn(tokens);\n                    if (typeof userFunc !== 'function') {\n                        warn(150, fnToken);\n                        return userFunc;\n                    }\n                    userFuncReturn = userFunc(...args.map((arg) => typeof arg === 'function' ? arg(tokens) : arg));\n                    if (tailCall) {\n                        tailCall = tailCall.provide((subTokens) => {\n                            const rootTokens = provideTokens(subTokens);\n                            const t = subTokens.reduce((tokenSet, token) => {\n                                const isTail = token === tail || (tail === null || tail === void 0 ? void 0 : tail.startsWith(`${token}(`));\n                                if (isTail) {\n                                    const value = getAt(userFuncReturn, token);\n                                    tokenSet[token] = () => value;\n                                }\n                                else {\n                                    tokenSet[token] = rootTokens[token];\n                                }\n                                return tokenSet;\n                            }, {});\n                            return t;\n                        });\n                    }\n                    return tailCall ? tailCall() : userFuncReturn;\n                };\n            }\n        }\n        else if (typeof operand === 'string') {\n            // the word true or false will never contain further operations\n            if (operand === 'true')\n                return true;\n            if (operand === 'false')\n                return false;\n            if (operand === 'undefined')\n                return undefined;\n            // Truly quotes strings cannot contain an operation, return the string\n            if (isQuotedString(operand))\n                return rmEscapes(operand.substring(1, operand.length - 1));\n            // Actual numbers cannot be contain an operation\n            if (!isNaN(+operand))\n                return Number(operand);\n            if (step < operatorRegistry.length - 1) {\n                return parseLogicals(operand, step + 1);\n            }\n            else {\n                if (operand.startsWith('$')) {\n                    const cleaned = operand.substring(1);\n                    requirements.add(cleaned);\n                    return function getToken(tokens) {\n                        return cleaned in tokens ? tokens[cleaned]() : undefined;\n                    };\n                }\n                // In this case we are dealing with an unquoted string, just treat it\n                // as a plain string.\n                return operand;\n            }\n        }\n        return operand;\n    }\n    /**\n     * Compile the string.\n     */\n    const compiled = parseLogicals(expr.startsWith('$:') ? expr.substring(2) : expr);\n    /**\n     * Convert compiled requirements to an array.\n     */\n    const reqs = Array.from(requirements);\n    /**\n     * Provides token values via callback to compiled output.\n     * @param callback - A callback that needs to provide all token requirements\n     * @returns\n     */\n    function provide(callback) {\n        provideTokens = callback;\n        return Object.assign(compiled.bind(null, callback(reqs)), {\n            provide,\n        });\n    }\n    return Object.assign(compiled, {\n        provide,\n    });\n}\n\n/**\n * Function that produces a standardized object representation of CSS classes.\n *\n * @param propertyKey - the section key.\n * @param node - A {@link FormKitNode | FormKitNode}.\n * @param sectionClassList - A `string | Record<string, boolean>` or a {@link FormKitClasses | FormKitClasses}.\n *\n * @returns `Record<string, boolean>`\n *\n * @public\n */\nfunction createClasses(propertyKey, node, sectionClassList) {\n    if (!sectionClassList)\n        return {};\n    if (typeof sectionClassList === 'string') {\n        const classKeys = sectionClassList.split(' ');\n        return classKeys.reduce((obj, key) => Object.assign(obj, { [key]: true }), {});\n    }\n    else if (typeof sectionClassList === 'function') {\n        return createClasses(propertyKey, node, sectionClassList(node, propertyKey));\n    }\n    return sectionClassList;\n}\n/**\n * Combines multiple class lists into a single list.\n *\n * @param node - A {@link FormKitNode | FormKitNode}.\n * @param property - The property key to which the class list will be applied.\n * @param args - And array of `Record<string, boolean>` of CSS class list(s).\n *\n * @returns `string | null`\n *\n * @public\n */\nfunction generateClassList(node, property, ...args) {\n    const combinedClassList = args.reduce((finalClassList, currentClassList) => {\n        if (!currentClassList)\n            return handleNegativeClasses(finalClassList);\n        const { $reset, ...classList } = currentClassList;\n        if ($reset) {\n            return handleNegativeClasses(classList);\n        }\n        return handleNegativeClasses(Object.assign(finalClassList, classList));\n    }, {});\n    return Object.keys(node.hook.classes.dispatch({ property, classes: combinedClassList })\n        .classes)\n        .filter((key) => combinedClassList[key])\n        .join(' ') || null;\n}\nfunction handleNegativeClasses(classList) {\n    const removalToken = '$remove:';\n    let hasNegativeClassValue = false;\n    const applicableClasses = Object.keys(classList).filter((className) => {\n        if (classList[className] && className.startsWith(removalToken)) {\n            hasNegativeClassValue = true;\n        }\n        return classList[className];\n    });\n    if (applicableClasses.length > 1 && hasNegativeClassValue) {\n        const negativeClasses = applicableClasses.filter(className => className.startsWith(removalToken));\n        negativeClasses.map((negativeClass) => {\n            const targetClass = negativeClass.substring(removalToken.length);\n            classList[targetClass] = false;\n            classList[negativeClass] = false;\n        });\n    }\n    return classList;\n}\n\n/**\n * Sets errors on a form, group, or input.\n *\n * @param id - The id of a form.\n * @param localErrors - The errors to set on the form or the form’s inputs in\n * the format of {@link ErrorMessages | ErrorMessages}.\n * @param childErrors - (optional) The errors to set on the form or the form’s\n * inputs in the format of {@link ErrorMessages | ErrorMessages}.\n *\n * @public\n */\nfunction setErrors(id, localErrors, childErrors) {\n    const node = getNode$1(id);\n    if (node) {\n        node.setErrors(localErrors, childErrors);\n    }\n    else {\n        warn(651, id);\n    }\n}\n/**\n * Clears errors on the node and optionally its children.\n *\n * @param id - The id of the node you want to clear errors for.\n * @param clearChildren - Determines if the children of this node should have\n * their errors cleared.\n *\n * @public\n */\nfunction clearErrors(id, clearChildren = true) {\n    const node = getNode$1(id);\n    if (node) {\n        node.clearErrors(clearChildren);\n    }\n    else {\n        warn(652, id);\n    }\n}\n\n/**\n * The official FormKit core library. This package is responsible for most of FormKit’s internal functionality.\n * You can read documentation specifically on how it works at formkit.com.\n *\n * You can add this package by using `npm install @formkit/core` or `yarn add @formkit/core`.\n *\n * @packageDocumentation\n */\n/**\n * The current version of FormKit at the time the package is published. Is replaced\n * as part of the publishing script.\n *\n * @internal\n */\nconst FORMKIT_VERSION = '0.17.2';\n\nexport { FORMKIT_VERSION, bfs, clearErrors, compile, createClasses, createConfig$1 as createConfig, createMessage, createNode, createPlaceholder, createValue, deregister, error, errorHandler, generateClassList, getNode$1 as getNode, isComponent, isConditional, isDOM, isList, isNode, isPlaceholder, isSugar, names, register, reset, resetCount, resetRegistry, setErrors, submitForm, sugar, use, useIndex, valueInserted, valueMoved, valueRemoved, warn, warningHandler, watchRegistry };\n", "import { has } from '@formkit/utils';\nimport { isNode } from '@formkit/core';\n\n/**\n * FormKit Observer is a utility to wrap a FormKitNode in a dependency tracking observer proxy.\n *\n * @packageDocumentation\n */\n/**\n * A registry of all revoked observers.\n */\nconst revokedObservers = new WeakSet();\n/**\n * Creates the observer.\n * @param node - The {@link @formkit/core#FormKitNode | FormKitNode} to observe.\n * @param dependencies - The dependent nodes and the events that are required to\n * watch for changes.\n * @returns Returns a {@link @formkit/observer#FormKitObservedNode | FormKitObservedNode}.\n * @public\n */\nfunction createObserver(node, dependencies) {\n    // The dependencies touched during tracking\n    const deps = dependencies || Object.assign(new Map(), { active: false });\n    // A registry of event receipts returned by the event system\n    const receipts = new Map();\n    /**\n     * Simple function to add a dependency to the deps map.\n     * @param event - The name of the event type (like commit/input etc)\n     */\n    const addDependency = function (event) {\n        var _a;\n        if (!deps.active)\n            return;\n        if (!deps.has(node))\n            deps.set(node, new Set());\n        (_a = deps.get(node)) === null || _a === void 0 ? void 0 : _a.add(event);\n    };\n    /**\n     * Proxies the props of a node so we know which ones were messed with, could\n     * potentially be more generalized in the future if we want to support\n     * more sub-objects.\n     * @param props - The props object from a node\n     * @returns\n     */\n    const observeProps = function (props) {\n        return new Proxy(props, {\n            get(...args) {\n                typeof args[1] === 'string' && addDependency(`prop:${args[1]}`);\n                return Reflect.get(...args);\n            },\n        });\n    };\n    /**\n     * Observes the FormKit ledger \"value\".\n     * @param ledger - A formkit ledger counter.\n     */\n    const observeLedger = function (ledger) {\n        return new Proxy(ledger, {\n            get(...args) {\n                if (args[1] === 'value') {\n                    return (key) => {\n                        addDependency(`count:${key}`);\n                        return ledger.value(key);\n                    };\n                }\n                return Reflect.get(...args);\n            },\n        });\n    };\n    /**\n     * Return values from our observer proxy first pass through this function\n     * which gives us a chance to listen sub-dependencies and properties.\n     */\n    const observe = function (value, property) {\n        if (isNode(value)) {\n            return createObserver(value, deps);\n        }\n        if (property === 'value')\n            addDependency('commit');\n        if (property === '_value')\n            addDependency('input');\n        if (property === 'props')\n            return observeProps(value);\n        if (property === 'ledger')\n            return observeLedger(value);\n        return value;\n    };\n    /**\n     * The actual proxy object of the original node.\n     */\n    const { proxy: observed, revoke, } = Proxy.revocable(node, {\n        get(...args) {\n            switch (args[1]) {\n                case '_node':\n                    return node;\n                case 'deps':\n                    return deps;\n                case 'watch':\n                    return (block, after) => watch(observed, block, after);\n                case 'observe':\n                    return () => {\n                        const old = new Map(deps);\n                        deps.clear();\n                        deps.active = true;\n                        return old;\n                    };\n                case 'stopObserve':\n                    return () => {\n                        const newDeps = new Map(deps);\n                        deps.active = false;\n                        return newDeps;\n                    };\n                case 'receipts':\n                    return receipts;\n                case 'kill':\n                    return () => {\n                        removeListeners(receipts);\n                        revokedObservers.add(args[2]);\n                        revoke();\n                        return undefined;\n                    };\n            }\n            const value = Reflect.get(...args);\n            // If we're dealing with a function, we need to sub-call the function\n            // get that return value, and pass it through the same logic.\n            if (typeof value === 'function') {\n                return (...subArgs) => {\n                    const subValue = value(...subArgs);\n                    return observe(subValue, args[1]);\n                };\n            }\n            return observe(value, args[1]);\n        },\n    });\n    return observed;\n}\n/**\n * Given two maps (`toAdd` and `toRemove`), apply the dependencies as event\n * listeners on the underlying nodes.\n * @param node - The node to apply dependencies to.\n * @param deps - A tuple of toAdd and toRemove FormKitDependencies maps.\n * @param callback - The callback to add or remove.\n * @internal\n */\nfunction applyListeners(node, [toAdd, toRemove], callback) {\n    toAdd.forEach((events, depNode) => {\n        events.forEach((event) => {\n            var _a;\n            node.receipts.has(depNode) || node.receipts.set(depNode, {});\n            node.receipts.set(depNode, Object.assign((_a = node.receipts.get(depNode)) !== null && _a !== void 0 ? _a : {}, {\n                [event]: depNode.on(event, callback),\n            }));\n        });\n    });\n    toRemove.forEach((events, depNode) => {\n        events.forEach((event) => {\n            if (node.receipts.has(depNode)) {\n                const nodeReceipts = node.receipts.get(depNode);\n                if (nodeReceipts && has(nodeReceipts, event)) {\n                    depNode.off(nodeReceipts[event]);\n                    delete nodeReceipts[event];\n                    node.receipts.set(depNode, nodeReceipts);\n                }\n            }\n        });\n    });\n}\n/**\n * Remove all the receipts from the observed node and subtree.\n * @param receipts - The FormKit observer receipts to remove.\n * @public\n */\nfunction removeListeners(receipts) {\n    receipts.forEach((events, node) => {\n        for (const event in events) {\n            node.off(events[event]);\n        }\n    });\n}\n/**\n * Observes a chunk of code to dependencies, and then re-calls that chunk of\n * code when those dependencies are manipulated.\n * @param node - The node to observer\n * @param block - The block of code to observe\n * @param after - A function to call after a effect has been run.\n * @public\n */\nfunction watch(node, block, after) {\n    const doAfterObservation = (res) => {\n        const newDeps = node.stopObserve();\n        applyListeners(node, diffDeps(oldDeps, newDeps), () => watch(node, block, after));\n        if (after)\n            after(res);\n    };\n    const oldDeps = new Map(node.deps);\n    node.observe();\n    const res = block(node);\n    if (res instanceof Promise)\n        res.then((val) => doAfterObservation(val));\n    else\n        doAfterObservation(res);\n}\n/**\n * Determines which nodes should be added as dependencies and which should be\n * removed.\n * @param previous - The previous watcher dependencies.\n * @param current - The new/current watcher dependencies.\n * @returns A tuple of maps: `toAdd` and `toRemove`.\n * @public\n */\nfunction diffDeps(previous, current) {\n    const toAdd = new Map();\n    const toRemove = new Map();\n    current.forEach((events, node) => {\n        if (!previous.has(node)) {\n            toAdd.set(node, events);\n        }\n        else {\n            const eventsToAdd = new Set();\n            const previousEvents = previous.get(node);\n            events.forEach((event) => !(previousEvents === null || previousEvents === void 0 ? void 0 : previousEvents.has(event)) && eventsToAdd.add(event));\n            toAdd.set(node, eventsToAdd);\n        }\n    });\n    previous.forEach((events, node) => {\n        if (!current.has(node)) {\n            toRemove.set(node, events);\n        }\n        else {\n            const eventsToRemove = new Set();\n            const newEvents = current.get(node);\n            events.forEach((event) => !(newEvents === null || newEvents === void 0 ? void 0 : newEvents.has(event)) && eventsToRemove.add(event));\n            toRemove.set(node, eventsToRemove);\n        }\n    });\n    return [toAdd, toRemove];\n}\n/**\n * Checks if the given node is revoked.\n * @param node - Any observed node to check.\n * @returns A `boolean` indicating if the node is revoked.\n * @public\n */\nfunction isKilled(node) {\n    return revokedObservers.has(node);\n}\n\nexport { applyListeners, createObserver, diffDeps, isKilled, removeListeners };\n", "import { createMessage } from '@formkit/core';\nimport { createObserver, removeListeners, isKilled, applyListeners, diffDeps } from '@formkit/observer';\nimport { cloneAny, token, eq, empty, clone, has } from '@formkit/utils';\n\n/**\n * Message that gets set when the node is awaiting validation.\n */\nconst validatingMessage = createMessage({\n    type: 'state',\n    blocking: true,\n    visible: false,\n    value: true,\n    key: 'validating',\n});\n/**\n * The actual validation plugin function. Everything must be bootstrapped here.\n *\n * @param baseRules - Base validation rules to include in the plugin. By default,\n * FormKit makes all rules in the \\@formkit/rules package available via the\n * defaultConfig.\n *\n * @public\n */\nfunction createValidationPlugin(baseRules = {}) {\n    return function validationPlugin(node) {\n        let propRules = cloneAny(node.props.validationRules || {});\n        let availableRules = { ...baseRules, ...propRules };\n        // create an observed node\n        let observedNode = createObserver(node);\n        const state = { input: token(), rerun: null, isPassing: true };\n        let validation = cloneAny(node.props.validation);\n        // If the node's validation props change, reboot:\n        node.on('prop:validation', ({ payload }) => reboot(payload, availableRules));\n        node.on('prop:validationRules', ({ payload }) => reboot(validation, payload));\n        /**\n         * Reboots the validation using new rules or declarations/intents.\n         * @param newValidation - New validation declaration to use\n         * @param newRules - New validation rules to use\n         * @returns\n         */\n        function reboot(newValidation, newRules) {\n            var _a;\n            if (eq(Object.keys(propRules || {}), Object.keys(newRules || {})) &&\n                eq(validation, newValidation))\n                return;\n            propRules = cloneAny(newRules);\n            validation = cloneAny(newValidation);\n            availableRules = { ...baseRules, ...propRules };\n            // Destroy all observers that may re-trigger validation on an old stack\n            removeListeners(observedNode.receipts);\n            // Clear existing message observers\n            (_a = node.props.parsedRules) === null || _a === void 0 ? void 0 : _a.forEach((validation) => {\n                var _a;\n                validation.messageObserver = (_a = validation.messageObserver) === null || _a === void 0 ? void 0 : _a.kill();\n            });\n            // Remove all existing messages before re-validating\n            node.store.filter(() => false, 'validation');\n            node.props.parsedRules = parseRules(newValidation, availableRules);\n            observedNode.kill();\n            observedNode = createObserver(node);\n            validate(observedNode, node.props.parsedRules, state);\n        }\n        // Validate the field when this plugin is initialized\n        node.props.parsedRules = parseRules(validation, availableRules);\n        validate(observedNode, node.props.parsedRules, state);\n    };\n}\n/**\n * Given parsed validations, a value and a node, run the validations and set\n * the appropriate store messages on the node.\n * @param value - The value being validated\n * @param node - The Node this value belongs to\n * @param rules - The rules\n */\nfunction validate(node, validations, state) {\n    if (isKilled(node))\n        return;\n    state.input = token();\n    state.isPassing = true;\n    node.store.filter((message) => !message.meta.removeImmediately, 'validation');\n    validations.forEach((validation) => validation.debounce && clearTimeout(validation.timer));\n    if (validations.length) {\n        node.store.set(validatingMessage);\n        run(0, validations, node, state, false, () => {\n            node.store.remove(validatingMessage.key);\n        });\n    }\n}\n/**\n * Runs validation rules recursively while collecting dependencies allowing for\n * cross-node validation rules that automatically re-trigger when a foreign\n * value is changed.\n * @param current - The index of the current validation rule\n * @param validations - The remaining validation rule stack to run\n * @param node - An observed node, the owner of this validation stack\n * @param state - An object of state information about this run\n * @param removeImmediately - Should messages created during this call be removed immediately when a new commit takes place?\n * @returns\n */\nfunction run(current, validations, node, state, removeImmediately, complete) {\n    const validation = validations[current];\n    if (!validation)\n        return complete();\n    const currentRun = state.input;\n    validation.state = null;\n    function next(async, result) {\n        state.isPassing = state.isPassing && !!result;\n        validation.queued = false;\n        const newDeps = node.stopObserve();\n        applyListeners(node, diffDeps(validation.deps, newDeps), () => {\n            // Event callback for when the deps change:\n            validation.queued = true;\n            if (state.rerun)\n                clearTimeout(state.rerun);\n            state.rerun = setTimeout(validate, 0, node, validations, state);\n        });\n        validation.deps = newDeps;\n        if (state.input === currentRun) {\n            validation.state = result;\n            if (result === false) {\n                createFailedMessage(node, validation, removeImmediately || async);\n            }\n            else {\n                removeMessage(node, validation);\n            }\n            if (validations.length > current + 1) {\n                run(current + 1, validations, node, state, removeImmediately || async, complete);\n            }\n            else {\n                // The validation has completed\n                complete();\n            }\n        }\n    }\n    if ((!empty(node.value) || !validation.skipEmpty) &&\n        (state.isPassing || validation.force)) {\n        if (validation.queued) {\n            runRule(validation, node, (result) => {\n                result instanceof Promise\n                    ? result.then((r) => next(true, r))\n                    : next(false, result);\n            });\n        }\n        else {\n            // In this case our rule is not queued, so literally nothing happened that\n            // would affect it, we just need to move past this rule and make no\n            // modifications to state\n            run(current + 1, validations, node, state, removeImmediately, complete);\n        }\n    }\n    else {\n        // This rule is not being run because either:\n        //  1. The field is empty and this rule should not run when empty\n        //  2. A previous validation rule is failing and this one is not forced\n        // In this case we should call next validation.\n        if (empty(node.value) && validation.skipEmpty && state.isPassing) {\n            // This node has an empty value so its validation was skipped. So we\n            // need to queue it up, we do that by starting an observation and just\n            // touching the value attribute.\n            node.observe();\n            node.value;\n            // Because this validation rule is skipped when the node's value is empty\n            // so we keep the current value `state.isPassing` to the next rule execution\n            // if we pass null it will be typecasted to false and all following rules\n            // will be ignored including `required` rule which cause odds behavior\n            next(false, state.isPassing);\n        }\n        else {\n            next(false, null);\n        }\n    }\n}\n/**\n * Run a validation rule debounced or not.\n * @param validation - A validation to debounce\n */\nfunction runRule(validation, node, after) {\n    if (validation.debounce) {\n        validation.timer = setTimeout(() => {\n            node.observe();\n            after(validation.rule(node, ...validation.args));\n        }, validation.debounce);\n    }\n    else {\n        node.observe();\n        after(validation.rule(node, ...validation.args));\n    }\n}\n/**\n * The messages given to this function have already been set on the node, but\n * any other validation messages on the node that are not included in this\n * stack should be removed because they have been resolved.\n * @param node - The node to operate on.\n * @param messages - A new stack of messages\n */\nfunction removeMessage(node, validation) {\n    const key = `rule_${validation.name}`;\n    if (validation.messageObserver) {\n        validation.messageObserver = validation.messageObserver.kill();\n    }\n    if (has(node.store, key)) {\n        node.store.remove(key);\n    }\n}\n/**\n *\n * @param value - The value that is failing\n * @param validation - The validation object\n */\nfunction createFailedMessage(node, validation, removeImmediately) {\n    if (isKilled(node))\n        return;\n    if (!validation.messageObserver) {\n        validation.messageObserver = createObserver(node._node);\n    }\n    validation.messageObserver.watch((node) => {\n        const i18nArgs = createI18nArgs(node, validation);\n        return i18nArgs;\n    }, (i18nArgs) => {\n        const customMessage = createCustomMessage(node, validation, i18nArgs);\n        // Here we short circuit the i18n system to force the output.\n        const message = createMessage({\n            blocking: validation.blocking,\n            key: `rule_${validation.name}`,\n            meta: {\n                /**\n                 * Use this key instead of the message root key to produce i18n validation\n                 * messages.\n                 */\n                messageKey: validation.name,\n                /**\n                 * For messages that were created *by or after* a debounced or async\n                 * validation rule — we make note of it so we can immediately remove them\n                 * as soon as the next commit happens.\n                 */\n                removeImmediately,\n                /**\n                 * Determines if this message should be passed to localization.\n                 */\n                localize: !customMessage,\n                /**\n                 * The arguments that will be passed to the validation rules\n                 */\n                i18nArgs,\n            },\n            type: 'validation',\n            value: customMessage || 'This field is not valid.',\n        });\n        node.store.set(message);\n    });\n}\n/**\n * Returns a custom validation message if applicable.\n * @param node - FormKit Node\n * @param validation - The validation rule being processed.\n */\nfunction createCustomMessage(node, validation, i18nArgs) {\n    const customMessage = node.props.validationMessages &&\n        has(node.props.validationMessages, validation.name)\n        ? node.props.validationMessages[validation.name]\n        : undefined;\n    if (typeof customMessage === 'function') {\n        return customMessage(...i18nArgs);\n    }\n    return customMessage;\n}\n/**\n * Creates the arguments passed to the i18n\n * @param node - The node that performed the validation\n * @param validation - The validation that failed\n */\nfunction createI18nArgs(node, validation) {\n    // If a custom message has been found, short circuit the i18n system.\n    return [\n        {\n            node,\n            name: createMessageName(node),\n            args: validation.args,\n        },\n    ];\n}\n/**\n * Given a node, this returns the name that should be used in validation\n * messages. This is either the `validationLabel` prop, the `label` prop, or\n * the name of the input (in that order).\n * @param node - The node to display\n * @returns\n * @public\n */\nfunction createMessageName(node) {\n    if (typeof node.props.validationLabel === 'function') {\n        return node.props.validationLabel(node);\n    }\n    return (node.props.validationLabel ||\n        node.props.label ||\n        node.props.name ||\n        String(node.name));\n}\n/**\n * Describes hints, must also be changed in the debounceExtractor.\n */\nconst hintPattern = '(?:[\\\\*+?()0-9]+)';\n/**\n * A pattern to describe rule names. Rules names can only contain letters,\n * numbers, and underscores and must start with a letter.\n */\nconst rulePattern = '[a-zA-Z][a-zA-Z0-9_]+';\n/**\n * Regular expression for extracting rule data.\n */\nconst ruleExtractor = new RegExp(`^(${hintPattern}?${rulePattern})(?:\\\\:(.*)+)?$`, 'i');\n/**\n * Validation hints are special characters preceding a validation rule, like\n * !phone\n */\nconst hintExtractor = new RegExp(`^(${hintPattern})(${rulePattern})$`, 'i');\n/**\n * Given a hint string like ^(200)? or ^? or (200)?^ extract the hints to\n * matches.\n */\nconst debounceExtractor = /([\\*+?]+)?(\\(\\d+\\))([\\*+?]+)?/;\n/**\n * Determines if a given string is in the proper debounce format.\n */\nconst hasDebounce = /\\(\\d+\\)/;\n/**\n * The default values of the available validation hints.\n */\nconst defaultHints = {\n    blocking: true,\n    debounce: 0,\n    force: false,\n    skipEmpty: true,\n    name: '',\n};\n/**\n * Parse validation intents and strings into validation rule stacks.\n * @param validation - Either a string a validation rules, or proper array of structured rules.\n * @internal\n */\nfunction parseRules(validation, rules) {\n    if (!validation)\n        return [];\n    const intents = typeof validation === 'string'\n        ? extractRules(validation)\n        : clone(validation);\n    return intents.reduce((validations, args) => {\n        let rule = args.shift();\n        const hints = {};\n        if (typeof rule === 'string') {\n            const [ruleName, parsedHints] = parseHints(rule);\n            if (has(rules, ruleName)) {\n                rule = rules[ruleName];\n                Object.assign(hints, parsedHints);\n            }\n        }\n        if (typeof rule === 'function') {\n            validations.push({\n                rule,\n                args,\n                timer: 0,\n                state: null,\n                queued: true,\n                deps: new Map(),\n                ...defaultHints,\n                ...fnHints(hints, rule),\n            });\n        }\n        return validations;\n    }, []);\n}\n/**\n * A string of validation rules written in FormKitRule notation.\n * @param validation - The string of rules\n * @internal\n */\nfunction extractRules(validation) {\n    return validation.split('|').reduce((rules, rule) => {\n        const parsedRule = parseRule(rule);\n        if (parsedRule) {\n            rules.push(parsedRule);\n        }\n        return rules;\n    }, []);\n}\n/**\n * Given a rule like confirm:password_confirm produce a FormKitValidationIntent\n * @param rule - A string representing a validation rule.\n * @returns\n */\nfunction parseRule(rule) {\n    const trimmed = rule.trim();\n    if (trimmed) {\n        const matches = trimmed.match(ruleExtractor);\n        if (matches && typeof matches[1] === 'string') {\n            const ruleName = matches[1].trim();\n            const args = matches[2] && typeof matches[2] === 'string'\n                ? matches[2].split(',').map((s) => s.trim())\n                : [];\n            return [ruleName, ...args];\n        }\n    }\n    return false;\n}\n/**\n * Given a rule name, detect if there are any additional hints like !\n * @param ruleName - string representing a rule name\n * @returns\n */\nfunction parseHints(ruleName) {\n    const matches = ruleName.match(hintExtractor);\n    if (!matches) {\n        return [ruleName, { name: ruleName }];\n    }\n    const map = {\n        '*': { force: true },\n        '+': { skipEmpty: false },\n        '?': { blocking: false },\n    };\n    const [, hints, rule] = matches;\n    const hintGroups = hasDebounce.test(hints)\n        ? hints.match(debounceExtractor) || []\n        : [, hints];\n    return [\n        rule,\n        [hintGroups[1], hintGroups[2], hintGroups[3]].reduce((hints, group) => {\n            if (!group)\n                return hints;\n            if (hasDebounce.test(group)) {\n                hints.debounce = parseInt(group.substr(1, group.length - 1));\n            }\n            else {\n                group\n                    .split('')\n                    .forEach((hint) => has(map, hint) && Object.assign(hints, map[hint]));\n            }\n            return hints;\n        }, { name: rule }),\n    ];\n}\n/**\n * Extracts hint properties from the validation rule function itself and applies\n * them if they are not already in the set of validation hints extracted from\n * strings.\n * @param existingHints - An existing set of hints already parsed\n * @param rule - The actual rule function, which can contain hint properties\n * @returns\n */\nfunction fnHints(existingHints, rule) {\n    if (!existingHints.name) {\n        existingHints.name = rule.ruleName || rule.name;\n    }\n    return ['skipEmpty', 'force', 'debounce', 'blocking'].reduce((hints, hint) => {\n        if (has(rule, hint) && !has(hints, hint)) {\n            Object.assign(hints, {\n                [hint]: rule[hint],\n            });\n        }\n        return hints;\n    }, existingHints);\n}\n/**\n * Extracts all validation messages from the given node and all its descendants.\n * This is not reactive and must be re-called each time the messages change.\n * @param node - The FormKit node to extract validation rules from — as well as its descendants.\n * @public\n */\nfunction getValidationMessages(node) {\n    const messages = new Map();\n    const extract = (n) => {\n        const nodeMessages = [];\n        for (const key in n.store) {\n            const message = n.store[key];\n            if (message.type === 'validation' &&\n                message.blocking &&\n                message.visible &&\n                typeof message.value === 'string') {\n                nodeMessages.push(message);\n            }\n        }\n        if (nodeMessages.length) {\n            messages.set(n, nodeMessages);\n        }\n        return n;\n    };\n    extract(node).walk(extract);\n    return messages;\n}\n\nexport { createMessageName, createValidationPlugin, getValidationMessages };\n", "import { createMessageName } from '@formkit/validation';\nimport { has } from '@formkit/utils';\n\n/**\n * Given a string, convert it to sentence case.\n *\n * @param str - The string to sentence case.\n *\n * @returns `string`\n *\n * @public\n */\nfunction sentence(str) {\n    return str[0].toUpperCase() + str.substr(1);\n}\n/**\n * Creates an oxford-comma separated list of items.\n *\n * @param items - the items to list out.\n * @param conjunction - in the list \"x, y, and z\", \"and\" is the conjunction.\n * Defaults to \"or\".\n *\n * @returns `string`\n *\n * @public\n */\nfunction list(items, conjunction = 'or') {\n    return items.reduce((oxford, item, index) => {\n        oxford += item;\n        if (index <= items.length - 2 && items.length > 2) {\n            oxford += ', ';\n        }\n        if (index === items.length - 2) {\n            oxford += `${items.length === 2 ? ' ' : ''}${conjunction} `;\n        }\n        return oxford;\n    }, '');\n}\n/**\n * Given a string or a date, return a nice human-readable version.\n *\n * @param date - A string or a date.\n *\n * @returns `string`\n *\n * @public\n */\nfunction date(date) {\n    const dateTime = typeof date === 'string' ? new Date(Date.parse(date)) : date;\n    if (!(dateTime instanceof Date)) {\n        return '(unknown)';\n    }\n    return new Intl.DateTimeFormat(undefined, {\n        dateStyle: 'medium',\n        timeZone: 'UTC'\n    }).format(dateTime);\n}\n/**\n * Orders two variables from smallest to largest.\n *\n * @param first - The first number or string.\n * @param second - The second number or string.\n *\n * @returns `[smaller: number | string, larger: number | string]`\n *\n * @public\n */\nfunction order(first, second) {\n    return Number(first) >= Number(second) ? [second, first] : [first, second];\n}\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$D = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'إضافة',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'إزالة',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'إزالة الكل',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'عذرا، لم يتم تعبئة جميع الحقول بشكل صحيح.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'إرسال',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'لا يوجد ملف مختار',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'تحرك لأعلى',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'انتقل لأسفل',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'يتم الآن التحميل...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'تحميل المزيد',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'التالي',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'السابق',\n    /**\n     * Shown when transferring items between lists.\n     */\n    addAllValues: 'أضف جميع القيم',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'إضافة قيم محددة',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'قم بإزالة جميع القيم',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'إزالة القيم المحددة',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'اختر التاريخ',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'تاريخ التغيير',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'التاريخ المحدد غير صالح.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$D = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `الرجاء قبول ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} بعد ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} في المستقبل.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف أبجدية فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف وأرقام فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `يمكن أن تحتوي ${sentence(name)} على أحرف ومسافات فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف أبجدية.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف أو أرقام.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف أو مسافات.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على رمز.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف كبيرة.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف صغيرة.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أرقام.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `يجب أن يكون ${sentence(name)} رمزًا.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف كبيرة فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف صغيرة فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} قبل ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} في الماضي.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `يجب أن يكون ${sentence(name)} ما بين ${a} و ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} غير متطابق.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ليس تاريخًا صالحًا ، يرجى استخدام التنسيق ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `يجب أن يكون ${sentence(name)} بين ${date(args[0])} و ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'الرجاء أدخال بريد إليكتروني صالح.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `لا ينتهي ${sentence(name)} بـ ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `يجب أن يكون ${sentence(name)} حرفًا واحدًا على الأقل.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${max} حرفًا.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `يجب أن يتكون ${sentence(name)} من الأحرف ${max}.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} أكبر من أو يساوي ${min} حرفًا.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} بين ${min} و ${max} حرفًا.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `لا يمكن أن يكون أكثر من ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'لا يسمح بتنسيقات الملفات.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} من النوع: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `لا يمكن أن يكون أقل من ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} على الأقل ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ليس ${name} مسموحًا به.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} يجب ان يكون رقماً`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' أو ')} مطلوب.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} مطلوب.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `لا يبدأ ${sentence(name)} بـ ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `يرجى إدخال عنوان URL صالح.`;\n        /* </i18n> */\n    },\n};\n\nvar ar = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$D,\n    validation: validation$D\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$C = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'əlavə edin',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'çıxarmaq',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hamısını silin',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Üzr istəyirik, bütün sahələr düzgün doldurulmayıb.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Təqdim et',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Heç bir fayl seçilməyib',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'yuxarı hərəkət',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Aşağı hərəkət',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Yükləmə...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Daha çox yüklə',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Növbəti',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Əvvəlki',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Bütün dəyərləri əlavə edin',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Seçilmiş dəyərləri əlavə edin',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Bütün dəyərləri sil',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Seçilmiş dəyərləri sil',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Tarixi seçin',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Tarixi dəyişdirin',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Seçilmiş tarix etibarsızdır.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$C = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} qəbul edin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} sonra olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} gələcəkdə olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} yalnız əlifba sırası simvollarından ibarət ola bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} yalnız hərf və rəqəmlərdən ibarət ola bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} yalnız hərflərdən və boşluqlardan ibarət ola bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} əlifba sırası simvolları ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} hərfləri və ya nömrələri ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} hərfləri və ya boşluqları ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} simvolu ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} böyük olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kiçik olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} nömrələri ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} simvol olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} yalnız böyük hərfləri ehtiva edə bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} yalnız kiçik hərfləri ehtiva edə bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} əvvəl olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} keçmişdə olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a} və ${b} arasında olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} uyğun gəlmir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} etibarlı tarix deyil, ${args[0]} formatından istifadə edin`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])} və ${date(args[1])} arasında olmalıdır`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Etibarlı e-poçt ünvanı daxil edin.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ilə bitmir.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} icazə verilən dəyər deyil.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} ən azı bir simvol olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max} simvoldan kiçik və ya ona bərabər olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} simvol uzunluğunda olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} simvoldan böyük və ya ona bərabər olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min} və ${max} simvol arasında olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} icazə verilən dəyər deyil.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name}-dən çox ola bilməz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} dəyərindən kiçik və ya ona bərabər olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Fayl formatlarına icazə verilmir.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} aşağıdakı tipdə olmalıdır: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name}-dən az ola bilməz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ən azı ${args[0]} olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” icazə verilən ${name} deyil.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} rəqəm olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' və ya ')} tələb olunur.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} tələb olunur.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ilə başlamır.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Xahiş edirik, düzgün URL daxil edin.`;\n        /* </i18n> */\n    },\n};\n\nvar az = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$C,\n    validation: validation$C\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$B = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Добави',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Премахни',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Премахни всички',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Извинете, не всички полета са попълнени правилно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Изпрати',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Няма избран файл',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Преместване нагоре',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Преместете се надолу',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Зареждане...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Заредете повече',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Следващ',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Предишен',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Добавете всички стойности',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Добавяне на избрани стойности',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Премахнете всички стойности',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Премахване на избраните стойности',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Избери дата',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Промяна на датата',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Избраната дата е невалидна.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$B = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Моля приемете ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} трябва да е след ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде в бъдещето.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} може да съдържа само букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} може да съдържа само букви и цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} може да съдържа само букви и интервали.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} трябва да съдържа азбучни знаци.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} трябва да съдържа букви или цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} трябва да съдържа букви или интервали.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} трябва да съдържа символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} трябва да съдържа главни букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} трябва да съдържа малки букви.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} трябва да съдържа числа.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} трябва да бъде символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} може да съдържа само главни букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} може да съдържа само малки букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} трябва да е преди ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде в миналото.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Това поле е конфигурирано неправилно и не може да бъде изпратено`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} трябва да бъде между ${a} и ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} не съвпада.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} е невалидна дата. Моля, използвайте формата ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Това поле е конфигурирано неправилно и не може да бъде изпратено';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} трябва да бъде между ${date(args[0])} и ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Моля, въведете валиден имейл адрес.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} не завършва на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} е неразрешена стойност.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} трябва да има поне един символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} трябва да бъде по-малко или равно на ${max} символа.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} трябва да бъде ${max} символи дълго.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} трябва да бъде по-голямо или равно на ${min} символа.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде между ${min} и ${max} символа.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} е неразрешена стойност.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не може да има повече от ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде по-малко или равно на ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не са разрешени никакви файлови формати.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде от тип: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не може да има по-малко от ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде поне ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” е неразрешен ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} трябва да бъде число.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' или ')} изисква се.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} е задължително.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} не започва с ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Моля, въведете валиден URL адрес.`;\n        /* </i18n> */\n    },\n};\n\nvar bg = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$B,\n    validation: validation$B\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$A = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Afegir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Eliminar',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Eliminar tot',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Disculpi, no tots els camps estan omplerts correctament.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Cap fitxer triat',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Moure amunt',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Moure avall',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Carregant...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Carregar més',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Següent',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Anterior',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Afegir tots els valors',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Afegeix els valors seleccionats',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Eliminar tots els valors',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Elimina els valors seleccionats',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Trieu la data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Canviar data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'La data seleccionada no és vàlida.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$A = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Si us plau accepti ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser posterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} ha de succeïr al futur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} només pot contenir caràcters alfabètics.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} només pot contenir lletres i números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} només pot contenir lletres i espais.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} ha de contenir caràcters alfabètics.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} ha de contenir lletres o números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ha de contenir lletres o espais.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} ha de contenir símbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} ha de contenir majúscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} ha de contenir minúscules.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} ha de contenir números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} ha de ser un símbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} només pot contenir lletres majúscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} només pot contenir lletres minúscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser anterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} ha d'estar al passat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Aquest camp està configurat incorrectament i no pot ésser enviat.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ha d'estar entre ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} no concorda.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} no és una data vàlida, si us plau empri el format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Aquest camp està configurat incorrectament i no pot ésser enviat';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ha d'estar entre ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: `Si us plau, entri una adreça d'e-mail vàlida.`,\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no acaba amb ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} no és un valor acceptat.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} ha de tenir com a mínim un caràcter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser inferior o igual a ${max} caràcters.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ha de tenir una longitud de ${max} caràcters.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser major que o igual a ${min} caràcters.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ha d'estar entre ${min} i ${max} caràcters.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} no és un valor permès.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `No pot tenir més de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ha de ser menys que o igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No hi ha cap format de fitxer acceptat.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} ha de ser del tipus: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `No pot tenir menys de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ha de ser com a mínim ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” no s'accepta com a ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} ha de ser un número.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' o ')} es requereix.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} és obligatori.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no comença amb ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Si us plau inclogui una url vàlida.`;\n        /* </i18n> */\n    },\n};\n\nvar ca = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$A,\n    validation: validation$A\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$z = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Přidat',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odebrat',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odebrat vše',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pardon, ale ne všechna pole jsou vyplněna správně.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Odeslat',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Žádný soubor nebyl vybrán',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pohyb nahoru',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Posunout dolů',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Načítání...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Načíst více',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Další',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Předchozí',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Přidat všechny hodnoty',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Přidání vybraných hodnot',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Odstraňte všechny hodnoty',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Odstranění vybraných hodnot',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Zvolte datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Změnit datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Vybrané datum je neplatné.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$z = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosím, zaškrtněte ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musí být po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí být v budoucnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} může obsahovat pouze písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} může obsahovat pouze písmena a čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} musí obsahovat abecední znaky.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} musí obsahovat písmena nebo číslice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} musí obsahovat písmena nebo mezery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí obsahovat symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} musí obsahovat velká písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} musí obsahovat malá písmena.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} musí obsahovat čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí být symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} může obsahovat pouze velká písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} může obsahovat pouze malá písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musí být před ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí být v minulosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} musí být mezi ${a} a ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nejsou shodná.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} není platné datum, prosím, použijte formát ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} musí být mezi ${date(args[0])} a ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Prosím, zadejte platnou e-mailovou adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nekončí na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} není povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} musí mít nejméně jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} může mít maximálně ${max} znaků.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} by mělo být ${max} znaků dlouhé.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} musí obsahovat minimálně ${min} znaků.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} musí být dlouhé ${min} až ${max} znaků.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} není povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nelze použít více než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} musí mít menší nebo rovno než ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nejsou nakonfigurovány povolené typy souborů.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musí být typu: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nelze mít méně než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} musí být minimálně ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” není dovolená hodnota pro ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musí být číslo.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' nebo ')} je vyžadován.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je povinné.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nezačíná na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Zadejte prosím platnou adresu URL.`;\n        /* </i18n> */\n    },\n};\n\nvar cs = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$z,\n    validation: validation$z\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$y = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Tilføj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Fjern',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Fjern alle',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Alle felter er ikke korrekt udfyldt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Send',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen filer valgt',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Flyt op',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Flyt ned',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Indlæser...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Indlæs mere',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Næste',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Forrige',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Tilføj alle værdier',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Tilføj valgte værdier',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fjern alle værdier',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fjern valgte værdier',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Vælg dato',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Skift dato',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Den valgte dato er ugyldig.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$y = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Accepter venligst ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} skal være senere end ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} skal være i fremtiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver og tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver og mellemrum.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} skal indeholde alfabetiske tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} skal indeholde bogstaver eller tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} skal indeholde bogstaver eller mellemrum.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} skal indeholde symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} skal indeholde store bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} skal indeholde små bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} skal indeholde tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} skal være et symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} kan kun indeholde store bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kan kun indeholde små bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} skal være før ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} skal være før i dag.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} skal være mellem ${a} og ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} matcher ikke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} er ikke gyldig, brug venligst formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} skal være mellem ${date(args[0])} og ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Indtast venligst en gyldig email-adresse.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} er ikke en gyldig værdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} skal være på mindst ét tegn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} skal være på højst ${max} tegn.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} skal være ${max} tegn lange.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} skal være på mindst ${min} tegn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} skal være på mindst ${min} og højst ${max} tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} er ikke en gyldig værdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan ikke have flere end ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} skal være mindre eller lig med ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ingen filformater tilladt.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} skal være af filtypen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan ikke have mindre end ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} skal være mindst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” er ikke en tilladt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} skal være et tal.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' eller ')} er påkrævet.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} er påkrævet.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Indtast en gyldig URL.`;\n        /* </i18n> */\n    },\n};\n\nvar da = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$y,\n    validation: validation$y\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$x = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Hinzufügen',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Entfernen',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Alles entfernen',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Entschuldigung, nicht alle Felder wurden korrekt ausgefüllt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Senden',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Keine Datei ausgewählt',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Gehe nach oben',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Gehen Sie nach unten',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Wird geladen...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Mehr laden',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Weiter',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Voriges',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Alle Werte hinzufügen',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Ausgewählte Werte hinzufügen',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Alle Werte entfernen',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Ausgewählte Werte entfernen',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Datum wählen',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Datum ändern',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Das gewählte Datum ist ungültig.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$x = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Bitte ${name} akzeptieren.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} muss nach dem ${date(args[0])} liegen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} muss in der Zukunft liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} darf nur Buchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} darf nur Buchstaben und Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} dürfen nur Buchstaben und Leerzeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} muss alphabetische Zeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} muss Buchstaben oder Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} muss Buchstaben oder Leerzeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} muss ein Symbol enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} muss Großbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} muss Kleinbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} muss Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} muss ein Symbol sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} kann nur Großbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kann nur Kleinbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} muss vor dem ${date(args[0])} liegen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} muss in der Vergangenheit liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} muss zwischen ${args[0]} und ${args[1]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} stimmt nicht überein.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ist kein gültiges Datum im Format ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} muss zwischen ${date(args[0])} und ${date(args[1])} liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'E-Mail Adresse ist ungültig.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} endet nicht mit ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} muss mindestens ein Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} darf maximal ${max} Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} sollte ${max} Zeichen lang sein.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} muss mindestens ${min} Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} muss zwischen ${min} und ${max} Zeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Darf maximal ${args[0]} ${name} haben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} darf maximal ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Keine Dateiformate konfiguriert.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} muss vom Typ ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mindestens ${args[0]} ${name} erforderlich.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} muss mindestens ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ist kein gültiger Wert für ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} muss eine Zahl sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' oder ')} ist erforderlich.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} ist erforderlich.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} beginnt nicht mit ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Bitte geben Sie eine gültige URL ein.`;\n        /* </i18n> */\n    },\n};\n\nvar de = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$x,\n    validation: validation$x\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$w = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Προσθήκη',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Αφαίρεση',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Αφαίρεση όλων',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Λυπούμαστε, υπάρχουν πεδία που δεν έχουν συμπληρωθεί σωστά.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Υποβολή',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Κανένα αρχείο δεν έχει επιλεγεί',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Προς τα επάνω',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Προς τα κάτω',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Φορτώνει...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Φόρτωση περισσότερων',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Επόμενη',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Προηγούμενο',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Προσθήκη όλων των τιμών',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Προσθήκη επιλεγμένων τιμών',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Κατάργηση όλων των τιμών',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Αφαίρεση επιλεγμένων τιμών',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Επιλέξτε ημερομηνία',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Αλλαγή ημερομηνίας',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Η επιλεγμένη ημερομηνία δεν είναι έγκυρη.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$w = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Παρακαλώ αποδεχτείτε το ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι μετά της ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι στο μέλλον.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} μπορεί να περιέχει μόνο αλφαβητικούς χαρακτήρες.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και αριθμούς.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και κενά.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει αλφαβητικούς χαρακτήρες.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει γράμματα ή αριθμούς.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} πρέπει να περιέχει γράμματα ή κενά.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει το σύμβολο.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει κεφαλαία γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει πεζά γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει αριθμούς.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `Το ${sentence(name)} πρέπει να είναι ένα σύμβολο.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `Το ${sentence(name)} μπορεί να περιέχει μόνο κεφαλαία γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `Το ${sentence(name)} μπορεί να περιέχει μόνο πεζά γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι πριν της ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι στο παρελθόν.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${a} και ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} δεν ταιριάζει.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} δεν είναι έγυρη ημερομηνία, παρακαλώ ακολουθήστε την διαμόρφωση ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${date(args[0])} και ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Παρακαλώ πληκτρολογήστε μια έγκυρη email διεύθυνση. ',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} δεν καταλήγει με ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} πρέπει να είναι τουλάχιστον ενός χαρακτήρα.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι λιγότεροι ή ίσοι με ${max} χαρακτήρες.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `Το ${sentence(name)} θα πρέπει να έχει μήκος ${max} χαρακτήρες.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι περισσότεροι ή ίσοι με ${min} χαρακτήρες.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${min} και ${max} χαρακτήρες.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Δεν μπορεί να έχει παραπάνω από ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει αν είναι λιγότερο ή ίσο με το ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Δεν επιτρέπονται αρχεία.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι τύπου: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Δεν μπορεί να είναι λιγότερο από ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι τουλάχιστον ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” δεν είναι μια επιτρεπτή ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} πρέπει να είναι αριθμός.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ή ')} απαιτείται.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} είναι υποχρεωτικό.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} δεν αρχίζει με ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Παρακαλώ εισάγετε ένα έγκυρο URL.`;\n        /* </i18n> */\n    },\n};\n\nvar el = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$w,\n    validation: validation$w\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$v = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Add',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Remove',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Remove all',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, not all fields are filled out correctly.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Submit',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'No file chosen',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Move up',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Move down',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Loading...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Load more',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Next',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Previous',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Add all values',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Add selected values',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Remove all values',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Remove selected values',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Choose date',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Change date',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'The selected date is invalid.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$v = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Please accept the ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} must be after ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} must be in the future.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} can only contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} can only contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} can only contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters or numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters or spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain a symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain an uppercase letter.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain a lowercase letter.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} must be a symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase letters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase letters.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} must be before ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} must be in the past.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `This field was configured incorrectly and can’t be submitted.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} must be between ${a} and ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} does not match.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is not a valid date, please use the format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'This field was configured incorrectly and can’t be submitted';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} must be between ${date(args[0])} and ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Please enter a valid email address.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} doesn’t end with ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is not an allowed value.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} must be at least one character.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} must be less than or equal to ${max} characters.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} should be ${max} characters long.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} must be greater than or equal to ${min} characters.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} must be between ${min} and ${max} characters.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is not an allowed value.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Cannot have more than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} must be less than or equal to ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No file formats allowed.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} must be of the type: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Cannot have fewer than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Must be at least ${args[0]} ${name} .`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” is not an allowed ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} must be a number.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' or ')} is required.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is required.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} doesn’t start with ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Please enter a valid URL.`;\n        /* </i18n> */\n    },\n};\n\nvar en = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$v,\n    validation: validation$v\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$u = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Añadir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Quitar',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Quitar todos',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Discúlpe, los campos no fueron completados correctamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Archivo no seleccionado',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Moverse hacia arriba',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Moverse hacia abajo',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Cargando...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Cargar más',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Próximo',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Anterior',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Añadir todos los valores',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Añadir valores seleccionados',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Eliminar todos los valores',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Eliminar los valores seleccionados',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Elige fecha',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Cambiar fecha',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'La fecha seleccionada no es válida.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$u = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Acepte el ${name} por favor.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} debe ser posterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} debe ser una fecha futura.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} debe contener solo caractéres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} debe ser alfanumérico.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} espacios alfa solo pueden contener letras y espacios.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} debe contener caracteres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} debe contener letras o números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} debe contener letras o espacios.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} debe contener un símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} debe estar en mayúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} debe contener minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} debe contener números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} debe ser un símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} solo puede contener letras mayúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} solo puede contener letras minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} debe ser anterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} debe ser una fecha pasada.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `El campo no fue completado correctamente y no puede ser enviado.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} debe estar entre ${a} y ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} no coincide.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} no es una fecha válida, por favor utilice el formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'El campo no fue completado correctamente y no puede ser enviado.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} debe estar entre ${date(args[0])} y ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Ingrese una dirección de correo electrónico válida por favor.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no termina con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} no es un valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} debe tener al menos una letra.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} debe tener como máximo ${max} caractéres.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} debe tener ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} debe tener como mínimo ${min} caractéres.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} debe tener entre ${min} y ${max} caractéres.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} no es un valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `No puede tener más de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} debe ser menor o igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No existen formatos de archivos permitidos.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} debe ser del tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `No puede tener menos de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} debe ser de al menos ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” no es un valor permitido de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} debe ser un número.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' o ')} se requiere estar.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} es requerido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} debe comenzar con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Introduce una URL válida.`;\n        /* </i18n> */\n    },\n};\n\nvar es = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$u,\n    validation: validation$u\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$t = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'افزودن',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'حذف',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'همه را حذف کنید',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'همه فیلدها به‌درستی پر نشده‌اند',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'ثبت',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'هیچ فایلی انتخاب نشده است',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'حرکت به بالا',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'حرکت به پایین',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'در حال بارگذاری...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'بارگذاری بیشتر',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'بعدی',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'قبلی',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'تمام مقادیر را اضافه کنید',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'مقادیر انتخاب شده را اضافه کنید',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'تمام مقادیر را حذف کنید',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'حذف مقادیر انتخاب شده',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'تاریخ را انتخاب کنید',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'تغییر تاریخ',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'تاریخ انتخاب شده نامعتبر است',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$t = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `لطفاً ${name} را بپذیرید.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} باید بعد از تاریخ ${date(args[0])} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} باید مربوط به آینده باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} فقط میتواند شامل حروف الفبا باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} فقط میتواند شامل حروف و اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} فقط می تواند شامل حروف و فاصله باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} باید حاوی حروف الفبا باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} باید حاوی حروف یا اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} باید حاوی حروف یا فاصله باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} باید حاوی نماد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} باید دارای حروف بزرگ باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} باید حاوی حروف کوچک باشد.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} باید حاوی اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} باید یک نماد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} تنها می‌تواند شامل حروف بزرگ باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} تنها می‌تواند شامل حروف کوچک باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} باید قبل از تاریخ ${date(args[0])} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} باید مربوط به گذشته باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} باید بین ${args[0]} و ${args[1]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} مطابقت ندارد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} تاریخ معتبری نیست، لطفاً از قالب ${args[0]} استفاده کنید\n`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} باید بین ${date(args[0])} و ${date(args[1])} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'لطفا آدرس ایمیل معتبر وارد کنید.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} باید به ${list(args)} ختم شود.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} باید حداقل یک کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} باید کمتر یا برابر با ${max} کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} باید ${max} کاراکتر طولانی باشد.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} باید بزرگتر یا برابر با ${min} کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} باید بین ${min} و ${max} کاراکتر باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} نمی تواند بیش از ${args[0]} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} باید کمتر یا برابر با ${args[0]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'فرمت فایل مجاز نیست.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} باید از این نوع باشد: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} نمی تواند کمتر از ${args[0]} باشد.\n`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} باید حداقل ${args[0]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" یک ${name} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} باید عدد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' یا ')} مورد نیاز است.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `پر کردن ${sentence(name)} اجباری است.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} باید با ${list(args)} شروع شود.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `لطفا یک URL معتبر وارد کنید.`;\n        /* </i18n> */\n    },\n};\n\nvar fa = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$t,\n    validation: validation$t\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$s = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Lisää',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Poista',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Poista kaikki',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Kaikkia kenttiä ei ole täytetty oikein.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Tallenna',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ei valittuja tiedostoja',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Siirrä ylös',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Siirrä alas',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Ladataan...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Lataa lisää',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Seuraava',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Edellinen',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Lisää kaikki arvot',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Lisää valitut arvot',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Poista kaikki arvot',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Poista valitut arvot',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Valitse päivämäärä',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Vaihda päivämäärä',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Valittu päivämäärä on virheellinen.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$s = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Ole hyvä ja hyväksy ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} tulee olla ${date(args[0])} jälkeen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} on oltava tulevaisuudessa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} saa sisältää vain kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} saa sisältää vain kirjaimia ja numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} voivat sisältää vain kirjaimia ja välilyöntejä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} on sisällettävä aakkoselliset merkit.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} täytyy sisältää kirjaimia tai numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} täytyy sisältää kirjaimia tai välilyöntejä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} täytyy sisältää symboli.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} täytyy sisältää isoja kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} täytyy sisältää pieniä kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} täytyy sisältää numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} on oltava symboli.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} voi sisältää vain isoja kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} voi sisältää vain pieniä kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} tulee olla ennen: ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} on oltava menneisyydessä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} on oltava välillä ${a} - ${b} `;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ei täsmää.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ei ole validi päivämäärä, ole hyvä ja syötä muodossa: ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} on oltava välillä ${date(args[0])} - ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Syötä validi sähköpostiosoite.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} tulee päättyä ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ei ole sallittu vaihtoehto.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} on oltava vähintään yksi merkki.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} on oltava ${max} tai alle merkkiä.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} pitäisi olla ${max} merkkiä pitkä.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} on oltava vähintään ${min} merkkiä.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} on oltava vähintään ${min}, enintään ${max} merkkiä.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ei ole sallittu arvo.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Valitse enintään ${args[0]} ${name} vaihtoehtoa.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} on oltava ${args[0]} tai alle.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Tiedostoja ei sallita.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} tulee olla ${args[0]}-tiedostotyyppiä.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Valitse vähintään ${args[0]} ${name} vaihtoehtoa.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} tulee olla ${args[0]} tai suurempi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ei ole sallittu ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Kentän ${sentence(name)} tulee olla numero.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' tai ')} vaaditaan.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} vaaditaan.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} on alettava ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Anna kelvollinen URL-osoite.`;\n        /* </i18n> */\n    },\n};\n\nvar fi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$s,\n    validation: validation$s\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$r = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Ajouter',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Supprimer',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Enlever tout',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Désolé, tous les champs ne sont pas remplis correctement.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Valider',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Aucun fichier choisi',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Déplacez-vous',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Déplacez-vous',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Chargement...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Chargez plus',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Suivant',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Précédent',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Ajouter toutes les valeurs',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Ajouter les valeurs sélectionnées',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Supprimer toutes les valeurs',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Supprimer les valeurs sélectionnées',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Choisissez la date',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Modifier la date',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: `La date sélectionnée n'est pas valide.`,\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$r = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Veuillez accepter le ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} doit être postérieure au ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} doit être dans le futur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} ne peut contenir que des caractères alphabétiques.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} ne peut contenir que des lettres et des chiffres.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ne peuvent contenir que des lettres et des espaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} doit contenir des caractères alphabétiques.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} doit contenir au moins un lettre ou nombre.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} doit contenir des lettres ou des espaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} doit contenir un symbole.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} doit contenir au moins une majuscule.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} doit contenir au moins une minuscule.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} doit contenir des chiffres.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} doit être un symbole.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} ne peuvent contenir que des majuscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} ne peut contenir que des lettres minuscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} doit être antérieure au ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} doit être dans le passé.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} doit être comprise entre ${a} et ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne correspond pas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} n'est pas une date valide, veuillez utiliser le format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} doit être comprise entre ${date(args[0])} et ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Veuillez saisir une adresse email valide.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne se termine pas par ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} doit comporter au moins un caractère.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} doit être inférieur ou égal à ${max} caractères.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} doit contenir ${max} caractères.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} doit être supérieur ou égal à ${min} caractères.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} doit être comprise entre ${min} et ${max} caractères.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne peut pas avoir plus de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} doit être inférieur ou égal à ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Aucun format de fichier n’est autorisé';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} doit être du type: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ne peut pas avoir moins de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} doit être au moins de ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” n'est pas un ${name} autorisé.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} doit être un nombre.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ou ')} est requis.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} est requis.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne commence pas par ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Entrez une URL valide.`;\n        /* </i18n> */\n    },\n};\n\nvar fr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$r,\n    validation: validation$r\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$q = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Foeg ta',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ferwider',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ferwider alles',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, net alle fjilden binne korrekt ynfolle.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Ferstjoere',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Gjin bestân keazen',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Gean omheech',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Nei ûnderen',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Lade…',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Mear lade',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Folgende',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Foarige',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Foegje alle wearden ta',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Foegje selektearre wearden ta',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fuortsmite alle wearden',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fuortsmite selektearre wearden',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Kies datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Feroarje datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'De selektearre datum is ûnjildich.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$q = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Akseptearje de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} moat nei ${date(args[0])} wêze.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moat yn de takomst lizze.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mei allinne alfabetyske tekens befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mei allinne letters en sifers befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mei allinne letters en spaasjes befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain number.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} can only contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} moat foar ${date(args[0])} falle.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moat yn it ferline wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} moat tusken ${a} en ${b} lizze.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} komt net oerien.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is gjin jildige datum, brûk de notaasje ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} moat tusken ${date(args[0])} en ${date(args[1])} lizze`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Folje in jildich e-mailadres yn.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} einiget net mei ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is gjin tastiene wearde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} moat minimaal ien teken wêze.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${max} tekens.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} moat ${max} tekens lang wêze.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} moat grutter wêze as of gelyk wêze oan ${min} tekens.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} moat tusken de ${min} en ${max} tekens befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is gjin tastiene wearde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Mei net mear as ${args[0]} ${name} hawwe.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Gjin bestânsnotaasjes tastien.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} moat fan it type: ${args[0]} wêze`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mei net minder as ${args[0]} ${name} hawwe.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} moat minimaal ${args[0]} wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" is gjin tastiene ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} moat in getal wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' of ')} is ferplichte.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is ferplicht.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} begjint net mei ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Doch der in jildige url by.`;\n        /* </i18n> */\n    },\n};\n\nvar fy = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$q,\n    validation: validation$q\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$p = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'הוסף',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'מחק',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'מחק הכל',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'שים לב, לא כל השדות מלאים כראוי.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'שלח',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'לא נבחר קובץ..',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'הזז למעלה',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'הזז למטה',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'טוען...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'טען יותר',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'הבא',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'הקודם',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'הוסף את כל הערכים',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'הוספת ערכים נבחרים',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'הסר את כל הערכים',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'הסר ערכים נבחרים',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'בחר תאריך',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'שינוי תאריך',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'התאריך שנבחר אינו חוקי.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$p = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `אנא אשר את ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות אחרי ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בעתיד.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות אלפבת.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} יכול להכיל רק מספרים ואותיות.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} יכול להכיל רק אותיות ורווחים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} חייב להכיל תווים אלפביתיים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות או מספרים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות או רווחים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} חייב להכיל סמל.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות רישיות.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות קטנות.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} חייב להכיל מספרים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} חייב להיות סמל.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} יכול להכיל אותיות רישיות בלבד.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} יכול להכיל רק אותיות קטנות.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות לפני ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בעבר`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `שדה זה לא הוגדר כראוי ולא יכול להישלח.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} חייב להיות בין ${a} ו- ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} לא מתאים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} הוא לא תאריך תקין, אנא השתמש בפורמט ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'שדה זה לא הוגדר כראוי ולא יכול להישלח.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} חייב להיות בין ${date(args[0])} ו- ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'אנא הקלד אימייל תקין.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} לא מסתיים ב- ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} הוא לא ערך מורשה.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} חייב להיות לפחות תו אחד.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות פחות או שווה ל- ${max} תווים.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} צריך להיות ${max} תווים ארוכים.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות גדול או שווה ל- ${min} תווים.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בין ${min} ו- ${max} תווים.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} הוא לא ערך תקין.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} לא יכול להיות עם יותר מ- ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות פחות או שווה ל- ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'פורמט הקובץ לא מורשה.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות מסוג: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} לא יכול להיות עם פחות מ- ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות לפחות ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” לא מתאים ל- ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} חייב להיות מספר.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' או ')} נדרש.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} הינו חובה.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} לא מתחיל ב- ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `הזן כתובת URL חוקית.`;\n        /* </i18n> */\n    },\n};\n\nvar he = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$p,\n    validation: validation$p\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$o = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ukloni',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Predaj',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pomaknite se gore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pomakni se dolje',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Učitavanje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Učitaj više',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Sljedeći',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'prijašnji',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte sve vrijednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodavanje odabranih vrijednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Ukloni sve vrijednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Ukloni odabrane vrijednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Odaberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Promijeni datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Odabrani datum je nevažeći.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$o = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Potrebno je potvrditi ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti u periodu poslije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u budućnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mora sadržavati samo slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora sadržavati slova i brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mogu sadržavati samo slova i razmake..`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora sadržavati abecedne znakove.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora sadržavati slova ili brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora sadržavati slova ili razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora sadržavati simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora sadržavati velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora sadržavati mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora sadržavati brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} može sadržavati samo velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} može sadržavati samo mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti prije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u prošlosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Format sadržaja nije ispravan i ne može biti predan.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti između ${args[0]} i ${args[1]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne odgovara zadanoj vrijednosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nije ispravan format datuma. Molimo koristite sljedeći format: ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ovo polje nije ispravno postavljeno i ne može biti predano.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti vrijednost između ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Molimo upišite ispravnu email adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne završava s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nije dopuštena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora sadržavati barem jedan znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora imati ${max} ili manje znakova.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} trebao bi biti dugačak ${max} znakova.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora imati barem ${min} znakova.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Broj znakova za polje ${sentence(name)} mora biti između ${min} i ${max}.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nije dozvoljena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne smije imati više od ${args[0]} ${name} polja.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} mora imati vrijednost manju ili jednaku ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Format datoteke nije dozvoljen.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Format datoteke na polju ${sentence(name)} mora odgovarati: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Broj upisanih vrijednosti na polju ${name} mora biti barem ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti barem ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nije dozvoljena vrijednost na polju ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti broj.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ili ')} je potreban.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je obavezno.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne počinje s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Unesite valjanu URL adresu.`;\n        /* </i18n> */\n    },\n};\n\nvar hr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$o,\n    validation: validation$o\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$n = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Hozzáadás',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Eltávolítás',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Összes eltávolítása',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sajnáljuk, nem minden mező lett helyesen kitöltve.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Beküldés',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nincs fájl kiválasztva',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Mozgás felfelé',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Mozgás lefelé',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Betöltés...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Töltsön be többet',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Következő',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Előző',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Adja hozzá az összes értéket',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Kiválasztott értékek hozzáadása',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Távolítsa el az összes értéket',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'A kiválasztott értékek eltávolítása',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Válassza ki a dátumot',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Dátum módosítása',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'A kiválasztott dátum érvénytelen.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$n = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Fogadja el a ${name} mezőt.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek ${date(args[0])} után kell lennie.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mezőnek a jövőben kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} csak alfanumerikus karaktereket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} csak betűket és számokat tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} csak betűket és szóközöket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `A ${sentence(name)} betűrendes karaktereket kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `A ${sentence(name)} betűket vagy számokat kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `A ${sentence(name)} betűket vagy szóközöket kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `A ${sentence(name)} szimbólumot kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `A ${sentence(name)} nagybetűt kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `A ${sentence(name)} kisbetűt kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `A ${sentence(name)} számot kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `A ${sentence(name)} szimbólumnak kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `A ${sentence(name)} csak nagybetűket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `A ${sentence(name)} csak kisbetűket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek ${date(args[0])} előtt kell lennie.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mezőnek a múltban kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `A ${sentence(name)} mezőnek ${a} és ${b} között kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nem egyezik.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nem érvényes dátum, ${args[0]} formátumot használj`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mezőnek ${date(args[0])} és ${args[1]} között kell lennie`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Kérjük, érvényes email címet adjon meg.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} mező nem a kijelölt (${list(args)}) módon ér véget.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nem engedélyezett érték.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mezőnek legalább egy karakteresnek kell lennie.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek maximum ${max} karakteresnek kell lennie.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} karakter hosszúnak kell lennie.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek minimum ${min} karakteresnek kell lennie.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mezőnek ${min} és ${max} karakter között kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nem engedélyezett érték.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nem lehet több mint ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} nem lehet nagyobb, mint ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nincsenek támogatott fájlformátumok.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}-nak/nek a következőnek kell lennie: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nem lehet kevesebb, mint ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}-nak/nek minimum ${args[0]}-nak/nek kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" nem engedélyezett ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mezőnek számnak kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' vagy ')} szükséges.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} mező kötelező.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nem a következővel kezdődik: ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Kérjük, adjon meg egy érvényes URL-t.`;\n        /* </i18n> */\n    },\n};\n\nvar hu = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$n,\n    validation: validation$n\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$m = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Tambah',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Hapus',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hapus semua',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Maaf, tidak semua bidang formulir terisi dengan benar',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Kirim',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Tidak ada file yang dipilih',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pindah ke atas',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pindah ke bawah',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Memuat...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Muat lebih',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Berikutnya',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Sebelumnya',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Tambahkan semua nilai',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Tambahkan nilai yang dipilih',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Hapus semua nilai',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Hapus nilai yang dipilih',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Pilih tanggal',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Ubah tanggal',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Tanggal yang dipilih tidak valid.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$m = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Tolong terima kolom ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} nilainya harus lebih dari waktu ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} harus berisi waktu di masa depan.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} hanya bisa diisi huruf alfabet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} hanya bisa diisi huruf dan angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} hanya boleh berisi huruf dan spasi..`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} harus berisi karakter abjad.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} harus mengandung huruf atau angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} harus berisi huruf atau spasi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} harus berisi simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} harus berisi huruf besar.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} harus berisi huruf kecil.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} harus berisi angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} harus berupa simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} hanya dapat berisi huruf besar.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} hanya dapat berisi huruf kecil.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} nilainya harus kurang dari waktu ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} harus berisi waktu yang sudah lampau.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} harus bernilai diantara ${a} dan ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nilainya tidak cocok.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} waktu tidak cocok, mohon gunakan format waktu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} harus diantara waktu ${date(args[0])} dan waktu ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Tolong tulis alamat email yang benar.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nilainya tidak berakhiran dengan ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} adalah nilai yang tidak diizinkan.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} nilainya setidaknya berisi satu karakter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} jumlah karakternya harus kurang dari atau sama dengan ${max} karakter.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} harus ${max} karakter panjang.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} jumlah karakternya harus lebih dari atau sama dengan ${min} karakter.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} jumlah karakternya hanya bisa antara ${min} dan ${max} karakter.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nilainya tidak diizinkan.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Tidak bisa memiliki lebih dari ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} harus lebih kecil atau sama dengan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Format file tidak diizinkan';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} hanya bisa bertipe: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Tidak boleh kurang dari ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} setidaknya harus berisi ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” adalah nilai yang tidak diperbolehkan untuk ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} harus berupa angka.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' atau ')} diperlukan`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} harus diisi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} tidak dimulai dengan ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Harap masukkan URL yang valid.`;\n        /* </i18n> */\n    },\n};\n\nvar id = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$m,\n    validation: validation$m\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$l = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Inserisci',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Rimuovi',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Rimuovi tutti',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Ci dispiace, non tutti i campi sono compilati correttamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Invia',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nessun file selezionato',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Sposta in alto',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Sposta giù',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Caricamento...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Carica altro',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Prossimo',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Precedente',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Aggiungi tutti i valori',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Aggiungi valori selezionati',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Rimuovi tutti i valori',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Rimuovi i valori selezionati',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Scegli la data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Cambia data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'La data selezionata non è valida.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$l = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Si prega di accettare ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `la data ${sentence(name)} deve essere successiva ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `la data ${sentence(name)} deve essere nel futuro.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} può contenere solo caratteri alfanumerici.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} può contenere solo lettere e numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} può contenere solo lettere e spazi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} deve contenere caratteri alfabetici.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} deve contenere lettere o numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} deve contenere lettere o spazi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve contenere un simbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} deve contenere lettere minuscole.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} deve contenere numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve essere un simbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} può contenere solo lettere maiuscole.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} può contenere solo lettere minuscole.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `la data ${sentence(name)} deve essere antecedente ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} deve essere nel passato.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Questo campo è stato configurato male e non può essere inviato.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} deve essere tra ${a} e ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} non corrisponde.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} non è una data valida, per favore usa il formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Questo campo è stato configurato in modo errato e non può essere inviato.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} deve essere tra ${date(args[0])} e ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Per favore inserire un indirizzo email valido.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} non termina con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} non è un valore consentito.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} deve contenere almeno un carattere.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} deve essere minore o uguale a ${max} caratteri.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} deve contenere ${max} caratteri.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} deve essere maggiore o uguale a ${min} caratteri.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} deve essere tra ${min} e ${max} caratteri.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} non è un valore consentito.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Non può avere più di ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} deve essere minore o uguale a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Formato file non consentito.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} deve essere di tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Non può avere meno di ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} deve essere almeno ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" non è un ${name} consentito.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} deve essere un numero.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' o ')} è richiesto.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} è richiesto.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} non inizia con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Inserisci un URL valido.`;\n        /* </i18n> */\n    },\n};\n\nvar it = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$l,\n    validation: validation$l\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$k = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '追加',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '削除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '全て削除',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '項目が正しく入力されていません。',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '送信',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'ファイルが選択されていません',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '上に移動',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '下へ移動',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '読み込み中...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'さらに読み込む',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: '[次へ]',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: '前へ',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'すべての値を追加',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '選択した値を追加',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'すべての値を削除',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '選択した値を削除',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '日付を選択',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '日付を変更',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '選択した日付は無効です。',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$k = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name}の同意が必要です。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)}は${date(args[0])}より後の日付である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}は将来の日付でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)}には英字のみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)}には、文字と数字のみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)}には、文字とスペースのみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} にはアルファベット文字が含まれている必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} には文字または数字を含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} には文字またはスペースを含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} には記号が含まれている必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} には大文字を含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} には小文字を含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} には数字が含まれている必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} はシンボルでなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} には大文字しか使用できません`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} には小文字しか使用できません。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)}は${date(args[0])}より前の日付である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}は過去の日付である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `このフィールドは正しく構成されていないため、送信できません。`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)}は${a}と${b}の間にある必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)}が一致しません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)}は有効な日付ではありません。${args[0]}の形式を使用してください。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'このフィールドは正しく構成されておらず、送信できません。';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}は${date(args[0])}と${date(args[1])}の間にある必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '有効なメールアドレスを入力してください。',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)}は${list(args)}で終わっていません。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)}は許可された値ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)}は少なくとも1文字である必要があります。`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}は${max}文字以下である必要があります。`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} の長さは ${max} 文字でなければなりません。`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}は${min}文字以上である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}は${min}から${max}文字の間でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)}は許可された値ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}は${args[0]}を超えることはできません。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)}は${args[0]}以下である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'ファイル形式は許可されていません。';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}は${args[0]}である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}は${args[0]}未満にすることはできません。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}は少なくとも${args[0]}である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}”は許可された${name}ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)}は数値でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join('または')}${labels}が必要です。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)}は必須です。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)}は${list(args)}で始まっていません。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `有効な URL を入力してください。`;\n        /* </i18n> */\n    },\n};\n\nvar ja = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$k,\n    validation: validation$k\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$j = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'қосу',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Жою',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Барлығын жою',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Кешіріңіз, барлық өрістер дұрыс толтырылмаған.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Жіберу',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ешбір файл таңдалмады',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Жоғары жылжу',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Төмен жылжытыңыз',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Жүктеу...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Көбірек жүктеңіз',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Келесі',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Алдыңғы',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Барлық мәндерді қосыңыз',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Таңдалған мәндерді қосыңыз',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Барлық мәндерді алып тастаңыз',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Таңдалған мәндерді алып тастаңыз',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Күнді таңдаңыз',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Өзгерту күні',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Таңдалған күн жарамсыз.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$j = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `қабылдаңыз ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} кейін болуы керек ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} болашақта болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} тек алфавиттік таңбаларды қамтуы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} тек әріптер мен сандардан тұруы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} тек әріптер мен бос орындар болуы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} алфавиттік таңбалардан тұруы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} құрамында әріптер немесе сандар болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} құрамында әріптер немесе бос орындар болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} символы болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} құрамында бас әріптер болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} кіші әріп болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} сандардан тұруы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} символы болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} тек бас әріптерден тұруы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} құрамында тек кіші әріптер болуы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} бұрын болуы керек ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} өткенде болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} арасында болуы керек ${a} және ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} сәйкес келмейді.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} жарамды күн емес, пішімді пайдаланыңыз ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} арасында болуы керек ${date(args[0])} және ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Өтінеміз қолданыстағы электронды пошта адресін енгізіңіз.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} -мен бітпейді ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} рұқсат етілген мән емес.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} кем дегенде бір таңба болуы керек.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} кем немесе тең болуы керек ${max} кейіпкерлер.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} таңбалары болуы керек.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} артық немесе тең болуы керек ${min} кейіпкерлер.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} арасында болуы керек ${min} және ${max} кейіпкерлер.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} рұқсат етілген мән емес.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `артық болуы мүмкін емес ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} кем немесе тең болуы керек ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Файл пішімдері рұқсат етілмейді.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} типте болуы керек: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `кем болуы мүмкін емес ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} кем дегенде болуы керек ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” рұқсат етілмейді ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} сан болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' не ')} қажет.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} талап етіледі.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} -ден басталмайды ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Жарамды URL мекенжайын енгізіңіз.`;\n        /* </i18n> */\n    },\n};\n\nvar kk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$j,\n    validation: validation$j\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$i = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '추가',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '제거',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '모두 제거',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '모든 값을 채워주세요',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '제출하기',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '선택된 파일이 없습니다',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '위로 이동',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '아래로 이동',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '로드 중...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: '더 불러오기',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: '다음',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: '이전',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: '모든 값 추가',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '선택한 값 추가',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: '모든 값 제거',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '선택한 값 제거',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '날짜 선택',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '날짜 변경',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '선택한 날짜가 잘못되었습니다.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$i = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} 올바른 값을 선택 해주세요`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} 이후여야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 미래의 날짜여야합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} 알파벳 문자만 포함할 수 있습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} 문자와 숫자만 포함될 수 있습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 문자와 공백만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} 에는 알파벳 문자가 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} 에는 문자나 숫자가 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 에는 문자나 공백이 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} 에는 기호를 포함해야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 는 대문자를 포함해야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 는 소문자를 포함해야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} 에는 숫자가 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} 는 기호여야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 는 대문자만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 는 소문자만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} 이전여야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 과거의 날짜여야합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `잘못된 구성으로 제출할 수 없습니다`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a}와 ${b} 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} 일치하지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} 유효한 날짜가 아닙니다. ${args[0]}과 같은 형식을 사용해주세요`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '잘못된 구성으로 제출할 수 없습니다';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])}에서 ${date(args[1])} 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '올바른 이메일 주소를 입력해주세요',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)}로 끝나지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} 하나 이상의 문자여야 합니다`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max}자 이하여야 합니다`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} 는 ${max} 자 길이여야 합니다.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} 문자보다 크거나 같아야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min}에서 ${max}자 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name} 초과할 수 없습니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]}보다 작거나 같아야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '파일 형식이 허용되지 않습니다';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} 유형이어야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name}보다 작을 수 없습니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} 이상이어야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `${value}\" 허용되지 않는 ${name}입니다`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} 숫자여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' 또는 ')}가 필요합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} 필수 값입니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)}로 시작하지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `유효한 URL을 입력하십시오.`;\n        /* </i18n> */\n    },\n};\n\nvar ko = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$i,\n    validation: validation$i\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$h = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Legg til',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Fjern',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Fjern alle',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Beklager, noen felter er ikke fylt ut korrekt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Send inn',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen fil valgt',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Flytt opp',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Flytt ned',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Laster...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Last mer',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Neste',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Forrige',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Legg til alle verdier',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Legg til valgte verdier',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fjern alle verdier',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fjern valgte verdier',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Velg dato',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Endre dato',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Den valgte datoen er ugyldig.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$h = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Vennligst aksepter ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} må være senere enn ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} må være i fremtiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan bare inneholde alfabetiske tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan bare inneholde bokstaver og tall.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan bare inneholde bokstaver og mellomrom.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain number.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} can only contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} må være tidligere enn ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} må være i fortiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dette feltet er feilkonfigurert og kan ikke innsendes.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} må være mellom ${a} og ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} stemmer ikke overens.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} er ikke en gyldig dato, vennligst bruk formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dette feltet er feilkonfigurert og kan ikke innsendes.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} må være mellom ${date(args[0])} og ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vennligst oppgi en gyldig epostadresse.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} er ikke en tillatt verdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} må ha minst ett tegn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} må ha mindre enn eller nøyaktig ${max} tegn.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} skal være ${max} tegn langt.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} må ha mer enn eller nøyaktig ${min} tegn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} må ha mellom ${min} og ${max} tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} er ikke en tillatt verdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan ikke ha mer enn ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} må være mindre enn eller nøyaktig ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ingen tillatte filformater.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} må være av typen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan ikke ha mindre enn ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} må være minst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” er ikke en tillatt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} må være et tall.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' eller ')} er nødvendig.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} er påkrevd.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vennligst inkluder en gyldig url.`;\n        /* </i18n> */\n    },\n};\n\nvar nb = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$h,\n    validation: validation$h\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$g = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Toevoegen',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Verwijderen',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Alles verwijderen',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, niet alle velden zijn correct ingevuld.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Versturen',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Geen bestand gekozen',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Naar boven gaan',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Naar beneden verplaatsen',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Aan het laden...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Meer laden',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Vervolgens',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Voorgaand',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Alle waarden toevoegen',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Geselecteerde waarden toevoegen',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Alle waarden verwijderen',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Geselecteerde waarden verwijderen',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Kies een datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Datum wijzigen',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'De geselecteerde datum is ongeldig.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$g = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Accepteer de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} moet na ${date(args[0])} zijn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moet in de toekomst liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mag alleen alfabetische tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mag alleen letters en cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mag alleen letters en spaties bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} moet alfabetische tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} moet letters of cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} moet letters of spaties bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} moet een symbool bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} moet hoofdletters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} moet kleine letters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} moet cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} moet een symbool zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mag alleen hoofdletters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mag alleen kleine letters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} moet vóór ${date(args[0])} vallen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moet in het verleden liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dit veld is onjuist geconfigureerd en kan niet worden verzonden.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} moet tussen ${a} en ${b} liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} komt niet overeen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is geen geldige datum, gebruik de notatie ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dit veld is onjuist geconfigureerd en kan niet worden verzonden';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} moet tussen ${date(args[0])} en ${date(args[1])} liggen`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vul een geldig e-mailadres in.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} eindigt niet met ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is geen toegestane waarde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} moet minimaal één teken zijn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${max} tekens.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} moet ${max} tekens lang zijn.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} moet groter zijn dan of gelijk zijn aan ${min} tekens.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} moet tussen de ${min} en ${max} tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is geen toegestane waarde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Mag niet meer dan ${args[0]} ${name} hebben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Geen bestandsformaten toegestaan.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} moet van het type: ${args[0]} zijn`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mag niet minder dan ${args[0]} ${name} hebben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} moet minimaal ${args[0]} zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" is geen toegestane ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} moet een getal zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' of ')} is vereist.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is verplicht.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} begint niet met ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Voer een geldige URL in.`;\n        /* </i18n> */\n    },\n};\n\nvar nl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$g,\n    validation: validation$g\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$f = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Usuń',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Usuń wszystko',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nie wszystkie pola zostały wypełnione poprawnie.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Wyślij',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nie wybrano pliku',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Przesuń w górę',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Przesuń w dół',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Ładowanie...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Załaduj więcej',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Kolejny',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Poprzednia',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodaj wszystkie wartości',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodaj wybrane wartości',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Usuń wszystkie wartości',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Usuń wybrane wartości',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Wybierz datę',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Zmień datę',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Wybrana data jest nieprawidłowa.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$f = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Proszę zaakceptować ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musi być po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musi być w przyszłości.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfabetyczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfanumeryczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `Pole ${sentence(name)} mogą zawierać tylko litery i spacje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} musi zawierać znaki alfabetyczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} musi zawierać litery lub cyfry.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} musi zawierać litery lub spacje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} musi zawierać symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} musi zawierać wielkie litery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} musi zawierać małe litery.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} musi zawierać liczby.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} musi być symbolem.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} może zawierać tylko wielkie litery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} może zawierać tylko małe litery.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musi być przed ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musi być w przeszłości.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Pole zostało wypełnione niepoprawnie i nie może zostać wysłane.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Wartość pola ${sentence(name)} musi być pomiędzy ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nie pokrywa się.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Wartość pola ${sentence(name)} nie jest poprawną datą, proszę użyć formatu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'To pole zostało wypełnione niepoprawnie i nie może zostać wysłane';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Data w polu ${sentence(name)} musi być pomiędzy ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Proszę wpisać poprawny adres email.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Pole ${sentence(name)} nie kończy się na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Pole ${sentence(name)} nie jest dozwoloną wartością.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Pole ${sentence(name)} musi posiadać minimum jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi zawierać ${max} lub mniej znaków.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi zawierać ${min} lub więcej znaków.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi mieć ${min} znaków.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Pole ${sentence(name)} musi mieć ${min}-${max} znaków.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Pole ${sentence(name)} zawiera niedozwolone znaki.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nie można mieć więcej niż ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Wartość pola ${sentence(name)} musi być mniejsza lub równa ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nie podano dozwolonych typów plików.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musi być typem: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Musisz podać więcej niż ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return ` Musisz podać conajmniej ${args[0]} ${sentence(name)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `Wartość pola ${name} jest niedozwolona.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musi być numerem.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' lub ')} wymagany jest.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Pole ${sentence(name)} jest wymagane.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Wartośc pola ${sentence(name)} nie zaczyna się od ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Wprowadź prawidłowy adres URL.`;\n        /* </i18n> */\n    },\n};\n\nvar pl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$f,\n    validation: validation$f\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$e = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Incluir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Remover',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Remover todos',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Desculpe, alguns campos não foram preenchidos corretamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nenhum arquivo selecionado.',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Mover para cima',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Mover para baixo',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Carregando...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Carregar mais',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Próximo',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Anterior',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Adicione todos os valores',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Adicionar valores selecionados',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Remover todos os valores',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Remover valores selecionados',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Escolha a data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Data da alteração',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'A data selecionada é inválida.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$e = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Por favor aceite o ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser depois de ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser no futuro.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} precisa conter apenas letras.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} pode conter apenas letras e números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} pode conter apenas números e espaços.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} deve conter caracteres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} deve conter letras ou números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} deve conter letras ou espaços.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve conter um símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} deve conter letras maiúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} deve conter letras minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} deve conter números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve ser um símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} só pode conter letras maiúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} só pode conter letras minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser antes de ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser no passado.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Este campo não foi configurado corretamente e não pode ser submetido.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} precisa ser entre ${a} e ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} não é igual.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} não é uma data válida, por favor use este formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Este campo não foi configurado corretamente e não pode ser submetido.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} precisa ser entre ${date(args[0])} e ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Por favor, insira um endereço de email válido.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} não termina com ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} não é um valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} precisa conter ao menos um caractere.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser menor ou igual a ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} precisa conter ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser maior ou igual a ${min} caracteres.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} precisa ter entre ${min} e ${max} caracteres.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} não é um valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Não pode ter mais de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser menor ou igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Não há formatos de arquivos permitidos.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser do tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Não pode ter menos de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser pelo menos ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” não é um(a) ${name} permitido(a).`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} precisa ser um número.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ou ')} é necessário.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} é obrigatório.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} não começa com ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Por favor, insira uma url válida.`;\n        /* </i18n> */\n    },\n};\n\nvar pt = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$e,\n    validation: validation$e\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$d = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Adăugare',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Elimină',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Elimină tot',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pare rău, unele câmpuri nu sunt corect completate.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Trimite',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nu este selectat nici un fișier',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Mutare în sus',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Mutare în jos',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Se încarcă...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Încărcați mai mult',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Urmatorul',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Precedent',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Adăugați toate valorile',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Adăugarea valorilor selectate',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Eliminați toate valorile',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Eliminați valorile selectate',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Alege data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Modificați data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Data selectată este nevalidă.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$d = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Te rog acceptă ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să fie după ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} trebuie sa fie în viitor.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} poate conține doar caractere alafetice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} poate conține doar litere și numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} poate conține doar litere și spații.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} trebuie să conțină caractere alfabetice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} trebuie să conțină litere sau numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} trebuie să conțină litere sau spații.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} trebuie să conțină simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} trebuie să conțină majuscule.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} trebuie să conțină litere mici.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} trebuie să conțină numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} trebuie să fie un simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} poate conține doar litere mari.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} poate conține doar litere mici.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să preceadă ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie în trecut.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Câmpul a fost configurat incorect și nu poate fi trimis.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} trebuie să fie între ${a} și ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nu se potrivește.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nu este validă, te rog foloște formatul ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Câmpul a fost incorect configurat și nu poate fi trimis.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} trebuie să fie între ${date(args[0])} și ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Te rog folosește o adresă de email validă.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nu se termină cu ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nu este o valoare acceptată.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} trebuie sa conțină cel puțin un caracter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} trebuie sa aibă cel mult ${max} caractere.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ar trebui să aibă ${max} caractere lungi.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să aibă cel puțin ${min} caractere.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să aibă între ${min} și ${max} caractere.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nu este o valoare acceptată.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nu poate avea mai mult decat ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie cel mult egal cu ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Tipul de fișier neacceptat.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie de tipul: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nu poate avea mai puțin decât ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie cel puțin ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nu este o valoare acceptă pentru ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} trebuie să fie un număr.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' sau ')} este necesar.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} este necesar.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nu începe cu ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Introduceți o adresă URL validă.`;\n        /* </i18n> */\n    },\n};\n\nvar ro = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$d,\n    validation: validation$d\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$c = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Добавить',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Удалить',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Убрать все',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Извините, не все поля заполнены верно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Отправить',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Файл не выбран',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Переместить вверх',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Переместить вниз',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Загрузка...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Загрузить больше',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Следующий',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Предыдущий',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Добавить все значения',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Добавить выбранные значения',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Удалить все значения',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Удалить выбранные значения',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Выберите дату',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Изменить дату',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Выбранная дата недействительна.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$c = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Пожалуйста, примите ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} должна быть позже ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} должна быть в будущем.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Поле ${sentence(name)} может содержать только буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Поле ${sentence(name)} может содержать только буквы и цифры.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} могут содержать только буквы и пробелы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} должен содержать алфавитные символы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} должен содержать буквы или цифры.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} должно содержать буквы или пробелы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} должен содержать символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} должно содержать прописные буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} должно содержать строчные буквы.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} должен содержать числа.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} должен быть символом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} может содержать только прописные буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} может содержать только буквы нижнего регистра.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} должна быть раньше ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} должна быть в прошлом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Это поле заполнено неверно и не может быть отправлено.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Поле ${sentence(name)} должно быть между ${a} и ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `Поле ${sentence(name)} не совпадает.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Поле ${sentence(name)} имеет неверную дату. Пожалуйста, используйте формат ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Это поле заполнено неверно и не может быть отправлено.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Дата ${sentence(name)} должна быть между ${date(args[0])} и ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Пожалуйста, введите действительный электронный адрес.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} не должно заканчиваться на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Поле ${sentence(name)} имеет неподустимое значение.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Поле ${sentence(name)} должно содержать минимум один символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Длина поля ${sentence(name)} должна быть меньше или равна ${max} символам.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `Длина ${sentence(name)} должна составлять ${max} символов.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Длина поля ${sentence(name)} должна быть больше или равна ${min} символам.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Длина поля ${sentence(name)} должна быть между ${min} и ${max} символами.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Поле ${sentence(name)} имеет недопустимое значение.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не может быть выбрано больше, чем ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно быть меньше или равно ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не указаны поддержиавемые форматы файла.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Формат файла в поле ${sentence(name)} должен быть: ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не может быть выбрано меньше, чем ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно быть не менее, чем ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” не поддерживается в поле ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Поле ${sentence(name)} должно быть числом.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' или ')} требуется.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Поле ${sentence(name)} обязательно для заполнения.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно начинаться с ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Пожалуйста, введите действительный URL-адрес.`;\n        /* </i18n> */\n    },\n};\n\nvar ru = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$c,\n    validation: validation$c\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$b = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Pridať',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odstrániť',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odstrániť všetko',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Prepáčte, ale nie všetky polia sú vyplnené správne.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Odoslať',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nebol vybraný žiadny súbor',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Posunúť hore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Posunúť dole',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Načítavanie...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Načítať viac',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Ďalšie',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Predošlý',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Pridajte všetky hodnoty',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Pridajte vybrané hodnoty',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Odstrániť všetky hodnoty',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Odstrániť vybrané hodnoty',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Vyberte dátum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Zmena dátumu',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Vybraný dátum je neplatný.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$b = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosím zaškrtnite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musí byť za ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí byť v budúcnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} môže obsahovať iba písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} môže obsahovať iba písmená a čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} môže obsahovať iba písmená a medzery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} musí obsahovať abecedné znaky.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} musí obsahovať písmená alebo číslice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} musí obsahovať písmená alebo medzery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí obsahovať symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} musí obsahovať veľké písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} musí obsahovať malé písmená.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} musí obsahovať čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí byť symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} môže obsahovať iba veľké písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} môže obsahovať len malé písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musí byť pred ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí byť v minulosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} musí byť medzi ${a} and ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} does not match.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nie je platným dátumom, prosím, použite formát ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} musí byť medzi ${date(args[0])} a ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Prosím, zadajte platnú emailovú adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nekončí na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nie je povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} musí mať najmenej jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} musí byť menšie alebo rovné ako ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} by mala mať dĺžku ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} musí byť väčšie alebo rovné ako ${min} znakov.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} musí byť medzi ${min} až ${max} znakov.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nie je povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nie je možné použiť viac než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} musí byť menšie alebo rovné ako ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nie sú povolené formáty súborov.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musí byť typu: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nemôže byť menej než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} musí byť minimálne ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nie je povolené hodnota pre ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musí byť číslo.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' alebo ')} je potrebný.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je povinné.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nezačíná s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Zadajte platnú adresu URL.`;\n        /* </i18n> */\n    },\n};\n\nvar sk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$b,\n    validation: validation$b\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$a = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odstrani',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odstrani vse',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nekatera polja niso pravilno izpolnjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pošlji',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nobena datoteka ni izbrana',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Premakni se navzgor',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Premakni se navzdol',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Nalaganje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Naloži več',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Naslednji',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Prejšnji',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte vse vrednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodajanje izbranih vrednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Odstranite vse vrednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Odstrani izbrane vrednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Izberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Spremeni datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Izbrani datum je neveljaven.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$a = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosimo popravite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti v prihodnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo znake abecede.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo črke in številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo črke in presledke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora vsebovati abecedne znake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora vsebovati črke ali številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora vsebovati črke ali presledke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora vsebovati simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora vsebovati velike črke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora vsebovati male črke.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora vsebovati številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} lahko vsebuje le velike črke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} lahko vsebuje le male črke.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti pred ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti v preteklosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `To polje je narobe nastavljeno in ne mora biti izpolnjeno.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti med ${a} in ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} se ne ujema.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ni pravilen datum, prosimo uporabite format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'To polje je narobe nastavljeno in ne mora biti izpolnjeno.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti med ${date(args[0])} in ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vnesite veljaven e-poštni naslov.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se mora kočati z ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ni dovoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora vsebovati vsaj en znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora vsebovati največ ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} mora biti dolg ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora vsebovati vsaj ${min} znakov.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mora vsebovati med ${min} in ${max} znakov.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ni dovoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Največ je ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} je lahko največ ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nobena vrsta datoteke ni dovoljena.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Najmanj ${args[0]} ${name} je dovoljenih.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti vsaj ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ni dovoljen(a/o) ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti številka.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ali ')} zahtevan je.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je zahtevan(o/a).`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se mora začeti z ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vnesite veljaven URL.`;\n        /* </i18n> */\n    },\n};\n\nvar sl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$a,\n    validation: validation$a\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$9 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ukloni',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ukloni sve',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pošalji',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Fajl nije odabran',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pomerite se gore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pomeri se dole',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Učitavanje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Učitaj više',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Sledeća',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Prethodna',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte sve vrednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodajte izabrane vrednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Uklonite sve vrednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Uklonite izabrane vrednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Izaberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Promenite datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Izabrani datum je nevažeći.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$9 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Molimo prihvatite ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti posle ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u budućnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} može da sadrži samo abecedne znakove.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} može da sadrži samo slova i brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} može da sadrži samo slova i razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora da sadrži abecedne znakove.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora da sadrži slova ili brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora da sadrži slova ili razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora da sadrži simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora da sadrži velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora da sadrži mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora da sadrži brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} može da sadrži samo velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} može da sadrži samo mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti pre ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u prošlosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ovo polje je pogrešno konfigurisano i ne može se poslati.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti između ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} se ne podudara.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nije važeći datum, molimo Vas koristite format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ovo polje je pogrešno konfigurisano i ne može se poslati';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti između ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Unesite ispravnu e-mail adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se ne završava sa ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nije dozvoljena vrednost`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora biti najmanje jedan karakter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora biti manji ili jednaki od ${max} karaktera.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} treba da bude ${max} znakova dugačak.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora biti veći ili jednaki od ${min} karaktera.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mora biti između ${min} i ${max} karaktera.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nije dozvoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne može imati više od ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti manji ili jednaki od ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nisu dozvoljeni formati datoteka.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ne može imati manje od ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora da ima najmanje ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nije dozvoljeno ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti broj.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' или ')} потребан је.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je obavezno polje.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne počinje sa ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Unesite važeću URL adresu.`;\n        /* </i18n> */\n    },\n};\n\nvar sr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$9,\n    validation: validation$9\n});\n\n// Please copy and paste the file your just downloaded here\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$8 = {\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ta bort',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ta bort alla',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Tyvärr är inte alla fält korrekt ifyllda',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Skicka',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen fil vald',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Flytta upp',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Flytta ner',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Laddar...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Ladda mer',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Nästa',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Föregående',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Lägg till alla värden',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Lägg till valda värden',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Ta bort alla värden',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Ta bort valda värden',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Välj datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Ändra datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Det valda datumet är ogiltigt.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$8 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Var god acceptera ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} måste vara efter ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} måste vara framåt i tiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan enbart innehålla bokstäver i alfabetet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan bara innehålla bokstäver och siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan bara innehålla bokstäver och blanksteg.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} måste innehålla alfabetiska tecken.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} måste innehålla bokstäver eller siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} måste innehålla bokstäver eller mellanslag.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} måste innehålla symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} måste innehålla versaler.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} måste innehålla gemener.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} måste innehålla siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} måste vara en symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} kan bara innehålla versaler.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kan bara innehålla små bokstäver.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} måste vara före ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} måste vara bakåt i tiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Det här fältet ställdes inte in korrekt och kan inte användas.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} måste vara mellan ${a} och ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} matchar inte.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} är inte ett giltigt datum, var god använd formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Det här fältet ställdes inte in korrekt och kan inte användas';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} måste vara mellan ${date(args[0])} och ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Var god fyll i en giltig e-postadress.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutar inte med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} är inte ett godkänt värde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} måste ha minst ett tecken.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} måste vara ${max} tecken eller färre.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} bör vara ${max} tecken långa.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} måste vara ${min} tecken eller fler.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} måste vara mellan ${min} och ${max} tecken.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} är inte ett godkänt värde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan inte ha mer än ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} måste vara ${args[0]} eller mindre.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Inga filtyper tillåtna.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} måste vara av filtypen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan inte ha mindre än ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} måste vara minst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” är inte ett godkänt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} måste vara en siffra.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' eller ')} krävs.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} är obligatoriskt.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} börjar inte med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Ange en giltig URL.`;\n        /* </i18n> */\n    },\n};\n\nvar sv = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$8,\n    validation: validation$8\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$7 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Илова кардан',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Хориҷ кардан',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ҳамаро хориҷ кунед',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Бубахшед, на ҳама майдонҳо дуруст пур карда шудаанд.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Пешниҳод кунед',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ягон файл интихоб нашудааст',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Ба боло ҳаракат кунед',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Ба поён ҳаракат кунед',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Дар ҳоли боргузорӣ',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Бештар бор кунед',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Баъдӣ',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Гузашта',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Ҳама арзишҳоро илова кунед',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Илова кардани арзишҳои интихобшуда',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Ҳама арзишҳоро хориҷ кунед',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Арзишҳои интихобшударо хориҷ кунед',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Сана интихоб кунед',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Тағйир додани сана',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Санаи интихобшуда нодуруст аст.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$7 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Лутфан ${name}-ро қабул кунед`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} бояд пас аз ${date(args[0])} бошад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} бояд дар оянда бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} метавонад танҳо аломатҳои алифборо дар бар гирад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} метавонад танҳо ҳарфҳо ва рақамҳоро дар бар гирад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} метавонад танҳо ҳарфҳо ва фосилаҳоро дар бар гирад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain number.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} can only contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} бояд пеш аз ${date(args[0])} бошад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} бояд дар гузашта бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} бояд дар байни ${a} ва ${b} бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} мувофиқат намекунад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} санаи дуруст нест, лутфан формати ${args[0]}-ро истифода баред`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} бояд дар байни ${date(args[0])} ва ${date(args[1])} бошад`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Лутфан нишонаи имейли амалкунандаро ворид намоед.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} бо ${list(args)} ба охир намерасад.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} бояд ҳадди аққал як аломат бошад.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} бояд аз ${max} аломат камтар ё баробар бошад.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} бояд ${max} аломат бошад.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} бояд аз ${min} аломат зиёд ё баробар бошад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} бояд дар байни ${min} ва ${max} аломат бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Зиёда аз ${args[0]} ${name} дошта наметавонад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} бояд аз ${args[0]} камтар ё баробар бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ягон формати файл иҷозат дода намешавад.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} бояд чунин намуд бошад: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Камтар аз ${args[0]} ${name} дошта наметавонад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} бояд ҳадди аққал ${args[0]} бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" ${name} иҷозат дода намешавад.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} бояд рақам бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ё ')} зарур а`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} лозим аст.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} бо ${list(args)} оғоз намешавад.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Лутфан URL-и дурустро дохил кунед.`;\n        /* </i18n> */\n    },\n};\n\nvar tg = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$7,\n    validation: validation$7\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$6 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'เพิ่ม',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'เอาออก',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'เอาออกทั้งหมด',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'ขออภัย ข้อมูลบางช่องที่กรอกไม่ถูกต้อง',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'ส่ง',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'ยังไม่ได้เลือกไฟล์',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'เลื่อนขึ้น',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'เลื่อนลง',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'กำลังโหลด...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'โหลดเพิ่มเติม',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'ถัดไป',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'ก่อนหน้า',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'เพิ่มค่าทั้งหมด',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'เพิ่มค่าที่เลือก',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'ลบค่าทั้งหมด',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'ลบค่าที่เลือก',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'เลือกวันที่',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'เปลี่ยนวันที่',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'วันที่ที่เลือกไม่ถูกต้อง',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$6 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `กรุณายอมรับ ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องเป็นวันที่หลังจาก ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ยังไม่มาถึง`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและตัวเลขเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและเว้นวรรคเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} ต้องมีตัวอักษรตัวอักษร`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} ต้องมีตัวอักษรหรือตัวเลข`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ต้องมีตัวอักษรหรือช่องว่าง`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} ต้องมีสัญลักษณ์`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} ต้องมีตัวพิมพ์ใหญ่`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} ต้องมีตัวพิมพ์เล็ก`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} ต้องมีตัวเลข`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} จะต้องเป็นสัญลักษณ์`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} เท่านั้นที่สามารถมีตัวอักษรตัวพิมพ์ใหญ่`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} เท่านั้นที่สามารถมีตัวอักษรตัวพิมพ์เล็ก`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องเป็นวันที่ที่มาก่อน ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ผ่านมาแล้ว`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} จะต้องเป็นค่าระหว่าง ${a} และ ${b}`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ไม่ตรงกัน`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ไม่อยู่ในรูปแบบวันที่ที่ถูกต้อง กรุณากรอกตามรูปแบบ ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ระหว่าง ${date(args[0])} และ ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'กรุณากรอกที่อยู่อีเมลทีถูกต้อง',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องลงท้ายด้วย ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} จะต้องมีความยาวอย่างน้อยหนึ่งตัวอักษร`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องมีความยาวไม่เกิน ${max} ตัวอักษร`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ควรจะเป็น ${max} ตัวอักษรยาว`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องมีความยาว ${min} ตัวอักษรขึ้นไป`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีความยาวระหว่าง ${min} และ ${max} ตัวอักษร`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `ไม่สามารถเลือกมากกว่า ${args[0]} ${name} ได้`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีค่าไม่เกิน ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'ไม่มีประเภทของไฟล์ที่อนุญาต';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นไฟล์ประเภท ${args[0]} เท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `ไม่สามารถเลือกน้อยกว่า ${args[0]} ${name} ได้`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีค่าอย่างน้อย ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ไม่ใช่ค่า ${name} ที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} จะต้องเป็นตัวเลขเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' หรือ ')} ต้องการ.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `กรุณากรอก ${sentence(name)}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเริ่มต้นด้วย ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `กรุณาระบุที่อยู่ลิงก์ให้ถูกต้อง`;\n        /* </i18n> */\n    },\n};\n\nvar th = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$6,\n    validation: validation$6\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$5 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Ekle',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Kaldır',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hepsini kaldır',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Maalesef, tüm alanlar doğru doldurulmadı.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Gönder',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Dosya yok',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Yukarı Taşı',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Aşağı taşı',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Yükleniyor...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Daha fazla yükle',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Sonraki',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Önceki',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Tüm değerleri ekle',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Seçili değerleri ekle',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Tüm değerleri kaldır',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Seçili değerleri kaldır',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Tarih seçin',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Tarihi değiştir',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Seçilen tarih geçersiz.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$5 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Lütfen ${name}'yi kabul edin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])}'den sonra olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} gelecekte bir zaman olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} sadece alfabetik karakterler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} sadece alfabetik karakterler ve sayı içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} yalnızca harf ve boşluk içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} alfabetik karakterler içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} harf veya rakamı içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} harf veya boşluk içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} sembol içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} büyük harf içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} küçük harf içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} sayı içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} bir sembol olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} yalnızca büyük harfler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} yalnızca küçük harfler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} tarihinden önce olmalı.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} geçmişte olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Alan yanlış yapılandırılmış ve gönderilemez.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a} ve ${b} aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} eşleşmiyor.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} geçerli bir tarih değil, lütfen ${args[0]} biçimini kullanın.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Alan yanlış yapılandırılmış ve gönderilemez.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}, ${date(args[0])} ve ${date(args[1])} aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Lütfen geçerli bir e-mail adresi girin.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ile bitmiyor.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} izin verilen bir değer değil.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} en azından bir karakter uzunluğunda olmalı.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max}'e eşit veya daha küçük olmalı.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} karakter uzunluğunda olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min}'e eşit veya daha büyük olmalı.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}, ${min} ve ${max} karakter uzunluğu aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} izin verilen bir değer değil.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}'in uzunluğu ${args[0]}'dan daha uzun olamaz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda veya ona eşit olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Hiçbir dosya türüne izin verilmez.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} şu tiplerden biri olmalı: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}'in uzunluğu ${args[0]}'dan daha kısa olamaz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ${name} olamaz.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} sayı olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' veya ')} gereklidir.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} gerekli.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ile başlamıyor.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Lütfen geçerli bir URL girin.`;\n        /* </i18n> */\n    },\n};\n\nvar tr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$5,\n    validation: validation$5\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$4 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Додати',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Видалити',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Видалити все',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Вибачте, не всі поля заповнені правильно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Відправити',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Файл не вибрано',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Рухатися вгору',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Пересунути вниз',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Завантаження...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Завантажте більше',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Наступний',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Попередній',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Додати всі значення',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Додати вибрані значення',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Вилучити всі значення',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Вилучити вибрані значення',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Виберіть дату',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Змінити дату',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Вибрана дата недійсна.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$4 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Будь ласка, прийміть ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} повинна бути пізніше за ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} має бути в майбутньому.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Поле ${sentence(name)} може містити лише літери.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Поле ${sentence(name)} може містити лише літери та цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `Поле ${sentence(name)} може містити лише літери та пробіли.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} повинен містити алфавітні символи.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} повинен містити букви або цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} повинен містити літери або пробіли.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} повинен містити символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} повинен містити великі регістри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} повинен містити малі регістри.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} повинен містити цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} має бути символом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} може містити лише великі літери.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} може містити лише малі літери.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} повинна бути раніше за ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} повинна бути в минулому.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Це поле заповнено неправильно і не може бути надіслано.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Поле ${sentence(name)} повинно бути між ${a} та ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `Поле ${sentence(name)} не збігається.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Поле ${sentence(name)} має неправильну дату. Будь ласка, використовуйте формат ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Це поле заповнено неправильно і не може бути надіслано.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Дата ${sentence(name)} повинна бути між ${date(args[0])} та ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Будь ласка, введіть дійсну електронну адресу.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} не повинно закінчуватися на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має неприпустиме значення.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Поле ${sentence(name)} має містити щонайменше один символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Довжина поля ${sentence(name)} повинна бути меншою або дорівнювати ${max} символам.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} має бути довжиною ${max} символів.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Довжина поля ${sentence(name)} повинна бути більшою або дорівнювати ${min} символам.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Довжина поля ${sentence(name)} повинна бути між ${min} та ${max} символами.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Поле ${sentence(name)} має неприпустиме значення.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не може бути вибрано більше ніж ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має бути менше або дорівнювати ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не вказано дозволені типи файлів.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Тип файлу в полі ${sentence(name)} має бути: ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не може бути вибрано менше ніж ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має бути не менше ніж ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” не дозволено в полі ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Поле ${sentence(name)} має бути числом.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' або ')} потрібно.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Поле ${sentence(name)} є обов'язковим.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має починатися з ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Будь ласка, введіть коректну URL-адресу.`;\n        /* </i18n> */\n    },\n};\n\nvar uk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$4,\n    validation: validation$4\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$3 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: \"Qo'shish\",\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: \"O'chirish\",\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: \"Hammasini o'chirish\",\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: \"Kechirasiz, barcha maydonlar to'g'ri to'ldirilmagan.\",\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Yuborish',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Hech qanday fayl tanlanmagan',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Yuqoriga ko’taring',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pastga siljish',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Yuklanmoqda...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Ko’proq yuklang',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Keyingi',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Oldingi',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: `Barcha qiymatlarni qo'shish`,\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: `Tanlangan qiymatlarni qoʻshish`,\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Barcha qiymatlarni olib tashlang',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Tanlangan qiymatlarni olib tashlash',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Sanani tanlang',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: `O'zgartirish sanasi`,\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Tanlangan sana yaroqsiz.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$3 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} ni qabul qiling.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} dan keyin bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} kelajakda bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} faqat alifbo tartibidagi belgilardan iborat bo'lishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} faqat harflar va raqamlardan iborat bo'lishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} faqat harf va bo'shliqlardan iborat bo'lishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} alfavit belgilarini o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} harflar yoki raqamlarni o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} harflar yoki bo'shliqlar bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} belgisi bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} katta harfni o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kichik harflarni o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} raqamlarini o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} belgisi bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} faqat katta harflarni o'z ichiga olishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} faqat kichik harflarni o'z ichiga olishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} dan oldin bo'lishi kerak`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} o'tmishda bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a} va ${b} orasida bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} mos emas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} haqiqiy sana emas, iltimos ${args[0]} formatidan foydalaning`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return \"Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi\";\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])} va ${date(args[1])} oralig'ida bo'lishi kerak`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Iltimos amaldagi e-mail manzilingizni kiriting.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} bilan tugamaydi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ruxsat etilgan qiymat emas.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} kamida bitta belgidan iborat bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max} ta belgidan kam yoki teng bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} bo'lishi kerak ${max} belgilar uzun.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} ta belgidan ko'p yoki teng bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min} va ${max} gacha belgilardan iborat bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ruxsat etilgan qiymat emas.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name} dan ortiq bo'lishi mumkin emas.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} dan kichik yoki teng bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Fayl formatlariga ruxsat berilmagan.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} quyidagi turdagi bo'lishi kerak: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name} dan kam bo'lmasligi kerak.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} kamida ${args[0]} bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" ruxsat berilmagan ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} raqam bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' yoki ')} kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} talab qilinadi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} bilan boshlanmaydi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Iltimos, tegishli URL manzilini kiriting.`;\n        /* </i18n> */\n    },\n};\n\nvar uz = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$3,\n    validation: validation$3\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$2 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Thêm',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Xoá',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Xoá tất cả',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Xin lỗi, không phải tất cả các trường đều được nhập đúng.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Gửi',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Chưa chọn file',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Di chuyển lên',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Di chuyển xuống',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Đang tải...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Tải thêm',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Tiếp',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Trước',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Thêm tất cả các giá trị',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Thêm các giá trị đã chọn',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Loại bỏ tất cả các giá trị',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Loại bỏ các giá trị đã chọn',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Chọn ngày',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Thay đổi ngày',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Ngày đã chọn không hợp lệ.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$2 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Hãy đồng ý với ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} phải sau ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} phải trong tương lai.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái alphabet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái và chữ số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa các chữ cái và khoảng trắng.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} phải chứa các ký tự chữ cái.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} phải chứa chữ cái hoặc số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} phải chứa chữ cái hoặc dấu cách.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} phải chứa ký hiệu.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} phải chứa chữ hoa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} phải chứa chữ thường.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} phải chứa số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} phải là một ký hiệu.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa chữ hoa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa chữ thường.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} phải trước ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} phải trong quá khứ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Trường này đã được thiết lập sai và không thể gửi.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} phải ở giữa ${a} và ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} không khớp.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} không phải ngày hợp lệ, hãy sử dụng định dạng ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Trường này đã được thiết lập sai và không thể gửi.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} phải ở giữa khoảng từ ${date(args[0])} đến ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Hãy nhập một địa chỉ email hợp lệ.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} không kết thúc với ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} phải có độ dài tối thiểu một ký tự.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} phải có độ dài tối đa ${max} ký tự.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} nên dài ${max} ký tự.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} phải có độ dài tối thiểu ${min} ký tự.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} phải có độ dài tối đa trong khoảng từ ${min} đến ${max} ký tự.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} không thể lớn hơn ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} phải tối đa bằng ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Định dạng tệp tin này không được phép.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} phải là một trong các dạng: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} không thể nhỏ hơn ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} phải tối thiểu bằng ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" không phải giá trị ${name} được phép.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} phải là một số.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' hoặc ')} cần có.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} là bắt buộc.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} không bắt đầu với ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vui lòng nhập một URL hợp lệ.`;\n        /* </i18n> */\n    },\n};\n\nvar vi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$2,\n    validation: validation$2\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$1 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: '添加',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '移除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '移除全部',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '抱歉，部分字段未被正确填写。',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '提交',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '未选择文件',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '上移',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '下移',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '加载中...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: '加载更多',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: '下一步',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: '上一步',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: '添加所有值',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '添加所选值',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: '移除所有值',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '移除所选值',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '选择日期',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '更改日期',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '所选日期无效。',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$1 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `请接受${name}。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)}必须晚于${date(args[0])}。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}必须是未来的日期。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)}只能包含英文字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)}只能包含字母和数字。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)}只能包含字母和空格。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} 必须包含字母字符`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} 必须包含字母或数字。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 必须包含字母或空格。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} 必须包含符号。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 必须包含大写字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 必须包含小写字母。`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} 必须包含数字。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} 必须是符号。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 只能包含大写字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 只能包含小写字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)}必须早于${date(args[0])}。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}必须是过去的日期。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `该字段未被正确设置而无法提交。`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)}必须在${a}和${b}之间。`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)}不匹配。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)}不是合法日期，请使用 ${args[0]} 格式`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '该字段未被正确设置而无法提交';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}必须在${date(args[0])}和${date(args[1])}之间`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '请输入合法的电子邮件地址。',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)}必须以${list(args)}结尾。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)}是不允许的。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)}至少要有一个字符。`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}必须少于或等于${max}个字符。`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)}必须包含${max}个字符。`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}必须多于或等于${min}个字符。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}必须介于${min}和${max}个字符之间。`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)}是不允许的。`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}不得多于${args[0]}个值。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${name}不得大于${args[0]}。`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '没有允许的文件格式。';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}的类型必须为：${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}不得少于${args[0]}个值。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}不得小于${args[0]}。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\"不是一个合法的${name}。`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)}必须为数字。`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join('或')}${labels}需要。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)}不得留空。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)}必须以${list(args)}开头。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `请输入有效的 URL。`;\n        /* </i18n> */\n    },\n};\n\nvar zh = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$1,\n    validation: validation$1\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: '新增',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '移除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '移除全部',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '很抱歉，部分欄位填寫錯誤',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '提交',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '尚未選取檔案',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '上移',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '下移',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '載入中...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: '載入更多',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: '下一個',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: '上一個',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: '加入全部的值',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '加入選取的值',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: '移除全部的值',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '移除選取的值',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '選擇日期',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '變更日期',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '選取的日期無效',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `請接受 ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} 必須晚於 ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 必須晚於今日`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} 欄位儘能填寫英文字母`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} 欄位僅能填寫英文字母與數字`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 欄位儘能填寫英文字母與空白`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} 必須早於 ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 必須早於今日`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `欄位值錯誤，無法提交`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} 必須介於 ${a} 和 ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} 與目標不一致`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} 不是有效的日期，請使用 ${args[0]} 格式`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '欄位值錯誤，無法提交';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} 必須介於 ${date(args[0])} 和 ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '請輸入有效的 email',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} 的結尾必須是 ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} 欄位的值不合規則`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} 欄位必須至少包含一個字`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} 的字數必須小於等於 ${max}`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} 的字數必須為 ${max}`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} 的字數必須大於等於 ${min}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} 的字數必須介於 ${min} 和 ${max}`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} 欄位的值無效`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `不能超過 ${args[0]} 個 ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} 必須小於等於 ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '非有效的檔案格式';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} 可接受的檔案格式為: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `不可少於 ${args[0]} 個 ${name}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${name} 必須大於等於 ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” 不是 ${name} 欄位可接受的值`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} 欄位必須是數字`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join('或')}${labels}需要。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} 是必要欄位`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} 的開頭必須是 ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `請輸入有效的 url`;\n        /* </i18n> */\n    },\n};\n\nvar zhTW = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui,\n    validation: validation\n});\n\n/**\n * Create a new internationalization plugin for FormKit.\n *\n * @param registry - The registry of {@link @formkit/i18n#FormKitLocaleRegistry | FormKitLocales}.\n *\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\n *\n * @public\n */\nfunction createI18nPlugin(registry) {\n    return function i18nPlugin(node) {\n        let localeKey = parseLocale(node.config.locale, registry);\n        let locale = localeKey ? registry[localeKey] : {};\n        /* If the locale prop changes, update the active locale */\n        node.on('prop:locale', ({ payload: lang }) => {\n            localeKey = parseLocale(lang, registry);\n            locale = localeKey ? registry[localeKey] : {};\n            // Run through all the messages in the store and update with new locale\n            node.store.touch();\n        });\n        node.on('prop:label', () => node.store.touch());\n        node.on('prop:validationLabel', () => node.store.touch());\n        /**\n         * Hook into the core text or t() hook to perform localization on the\n         * output of core functionality.\n         */\n        node.hook.text((fragment, next) => {\n            var _a, _b;\n            const key = ((_a = fragment.meta) === null || _a === void 0 ? void 0 : _a.messageKey) || fragment.key;\n            if (has(locale, fragment.type) && has(locale[fragment.type], key)) {\n                const t = locale[fragment.type][key];\n                if (typeof t === 'function') {\n                    fragment.value = Array.isArray((_b = fragment.meta) === null || _b === void 0 ? void 0 : _b.i18nArgs)\n                        ? t(...fragment.meta.i18nArgs) // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                        : t(fragment);\n                }\n                else {\n                    fragment.value = t;\n                }\n            }\n            return next(fragment);\n        });\n    };\n}\n/**\n * Parse ISO 639-1 and 639-2 to a valid locale key.\n *\n * @param locale - An ISO 639-1 and (optionally) ISO 639-2 language tag. For these are valid locale keys:\n * zh\n * zh-CN\n * zh-HK\n * en\n * en-GB\n *\n * @param availableLocales - An array of locales that may be valid.\n *\n * @public\n */\nfunction parseLocale(locale, availableLocales) {\n    if (has(availableLocales, locale)) {\n        return locale;\n    }\n    const [lang] = locale.split('-');\n    if (has(availableLocales, lang)) {\n        return lang;\n    }\n    for (const locale in availableLocales) {\n        return locale;\n    }\n    return false;\n}\n\n/**\n * The official FormKit internationalization (i18n) plugin. This package\n * contains the locales and the plugin that integrates FormKit with these\n * locales. Read the {@link https://formkit.com/essentials/internationalization\n * | internationalization documentation} for usage instructions.\n *\n * @packageDocumentation\n */\n/**\n * Export all the available locales at once.\n *\n * @public\n */\nconst locales = {\n    ar,\n    az,\n    bg,\n    ca,\n    cs,\n    da,\n    de,\n    el,\n    en,\n    es,\n    fa,\n    fi,\n    fr,\n    fy,\n    he,\n    hr,\n    hu,\n    id,\n    it,\n    ja,\n    kk,\n    ko,\n    nb,\n    nl,\n    pl,\n    pt,\n    ro,\n    ru,\n    sk,\n    sl,\n    sr,\n    sv,\n    tg,\n    th,\n    tr,\n    uk,\n    uz,\n    vi,\n    zh,\n    'zh-TW': zhTW,\n};\n\nexport { ar, az, bg, ca, createI18nPlugin, cs, da, date, de, el, en, es, fa, fi, fr, fy, he, hr, hu, id, it, ja, kk, ko, list, locales, nb, nl, order, pl, pt, ro, ru, sentence, sk, sl, sr, sv, tg, th, tr, uk, uz, vi, zh, zhTW };\n"],
  "mappings": "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",
  "names": ["format", "use", "receipts", "node", "bubble", "error", "errors", "id", "id", "resetValue", "extend", "calm", "hydrate", "run", "setIndex", "errors", "extend", "trap", "char", "depth", "token", "id", "receipts", "res", "validation", "_a", "removeMessage", "node", "hints", "date", "name", "registry", "locale"]
}
